#version 460
#extension GL_GOOGLE_include_directive      : enable
#extension GL_EXT_nonuniform_qualifier      : enable
#extension GL_KHR_shader_subgroup_clustered : enable
#extension GL_KHR_shader_subgroup_shuffle   : enable
#include "shared.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out2; // 2x2 downsized
layout(set = 1, binding = 2) uniform writeonly image2D img_out4; // 4x4 downsized
layout(set = 1, binding = 3) uniform writeonly image2D img_out8; // 8x8

shared vec3 sbuf[7*8];

// compute 3 simplistic 2x2 average mipmap levels at once.
void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID)/8;
  vec3 rgb = vec3(0.0);
  nonuniformEXT int sx = int(gl_SubgroupInvocationID % 8);
  nonuniformEXT int sy = int(gl_SubgroupInvocationID / 8 + 4*gl_SubgroupID);
  ivec2 tc = 8*ipos + ivec2(sx, sy);
  // if(all(lessThan(tc, textureSize(img_in, 0)))) rgb = texelFetch(img_in, tc, 0).rgb;
  rgb = texture(img_in, (tc + 0.5)/vec2(textureSize(img_in, 0))).rgb; // wrap around for non multiples of 8

  // horizontal sums/reduction
  sx /= 2;
  rgb = subgroupClusteredAdd(rgb, 2)/2.0;
  if((gl_SubgroupInvocationID % 2) == 0) sbuf[sx + 7*sy] = rgb;
  barrier();
  rgb = subgroupClusteredAdd(subgroupShuffleXor(rgb, 2), 2)/2.0;
  sx /= 2;
  if((gl_SubgroupInvocationID % 4) == 0) sbuf[4+sx + 7*sy] = rgb;
  barrier();
  rgb = subgroupClusteredAdd(subgroupShuffleXor(rgb, 4), 2)/2.0;
  sx /= 2;
  if((gl_SubgroupInvocationID % 8) == 0) sbuf[6 + 7*sy] = rgb;

  // vertical sums/reduction
  barrier(); // wait until shared memory is filled
  sy = int(gl_SubgroupInvocationID % 8);
  sx = int(gl_SubgroupInvocationID / 8 + 4*gl_SubgroupID);
  rgb = vec3(0.0);
  if(sx < 7) rgb = sbuf[sx + 7*sy];
  barrier();
  rgb = subgroupClusteredAdd(rgb, 2)/2.0;
  // TODO: go vertical first so we can write out coalesced? (images are special anyways?)
  if(sx < 4)
    if((sy % 2) == 0) imageStore(img_out2, 4*ipos + ivec2(sx, sy/2), vec4(rgb, 1)); // 4x4 block
  // barrier();

  rgb = subgroupClusteredAdd(subgroupShuffleXor(rgb, 2), 2)/2.0;
  if(sx >= 4 && sx < 6)
    if((sy % 4) == 0) imageStore(img_out4, 2*ipos + ivec2((sx-4), sy/4), vec4(rgb, 1)); // 2x2 block
  // barrier();

  rgb = subgroupClusteredAdd(subgroupShuffleXor(rgb, 4), 2)/2.0;
  if(sx == 6 && sy == 0)
    imageStore(img_out8, ipos, vec4(rgb, 1)); // 1x1 full average of 8x8 block
}
