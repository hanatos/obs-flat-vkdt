#version 460
#extension GL_GOOGLE_include_directive      : enable
#extension GL_EXT_nonuniform_qualifier      : enable
#extension GL_EXT_control_flow_attributes   : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8    : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32   : enable
#include "shared.glsl"
#include "sigmoid.glsl"
#include "config.h"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
// layout(std140, set = 0, binding = 1) uniform params_t { } params;
layout(push_constant, std140) uniform push_t
{
  int level;
} push;
layout(set = 1, binding = 0) uniform sampler2D img_M;
layout(set = 1, binding = 1) readonly buffer ssbo_K_t { float16_t v[]; } ssbo_K;
layout(set = 1, binding = 2) uniform writeonly image2D img_I;

void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_I)))) return;

  const ivec2 tap[] = {           ivec2(0, -2),
    ivec2(-2, -1), ivec2(-1, -1), ivec2(0, -1), ivec2(1, -1), ivec2(2, -1),
                   ivec2(-1,  0), ivec2(0,  0), ivec2(1,  0),
    ivec2(-2,  1), ivec2(-1,  1), ivec2(0,  1), ivec2(1,  1), ivec2(2,  1),
                                  ivec2(0,  2) //, ivec2(666,666)
  };
  if(push.level > 1)
  { // XXX DEBUG train only one level!
    vec3 rgb =  texture(img_M, (ipos + 0.5)/vec2(textureSize(img_M, 0))).rgb;
    imageStore(img_I, ipos, vec4(rgb, 1.0));
    return;
  }
#if 0
#if (APPLY_ACTIVATION==APPLY_SOFTMAX)
  vec3 rgb = vec3(0.0);
  float den = 0.0;
  float maxK = -1e38; // softmax(x) = softmax(x + c)
  [[unroll]] for(int k=0;k<15;k++)
  {
    uint32_t idx = 16*(ipos.x + ipos.y * imageSize(img_I).x) + k;
    maxK = max(maxK, float(ssbo_K.v[nonuniformEXT(idx)]));
  }
  [[unroll]] for(int k=0;k<15;k++)
  {
    uint32_t idx = 16*(ipos.x + ipos.y * imageSize(img_I).x) + k;
    const float w = sigma_exp(ssbo_K.v[nonuniformEXT(idx)]-maxK);
    rgb += w * texture(img_M, (ipos + tap[k] + 0.5)/vec2(textureSize(img_M, 0))).rgb;
    den += w;
  }
  rgb /= max(1e-3, den);
#elif (APPLY_ACTIVATION==APPLY_PLAIN)
  vec3 rgb = vec3(0.0);
  [[unroll]] for(int k=0;k<15;k++)
  {
    uint32_t idx = 16*(ipos.x + ipos.y * imageSize(img_I).x) + k;
    // const float w = clamp(float(ssbo_K.v[nonuniformEXT(idx)]), -20000.0, 20000.0);
    float w = float(ssbo_K.v[nonuniformEXT(idx)]);
    if(!(w < 10.0) || !(w > -10.0)) w = 0.001;
    rgb += w * texture(img_M, (ipos + tap[k] + 0.5)/vec2(textureSize(img_M, 0))).rgb;
  }
#elif (APPLY_ACTIVATION==APPLY_DEBUG)
  uint32_t ix = 16*(ipos.x + ipos.y * imageSize(img_I).x) + 7;
  const float w = clamp(float(ssbo_K.v[nonuniformEXT(ix)]), -65000.0, 65000.0);
  vec3 rgb = w * texture(img_M, (ipos + 0.5)/vec2(textureSize(img_M, 0))).rgb;
// #elif (APPLY_ACTIVATION==APPLY_SIGMOID)
//   vec3 rgb = vec3(0.0);
//   [[unroll]] for(int k=0;k<15;k++)
//   {
//     uint32_t idx = 16*(ipos.x + ipos.y * imageSize(img_I).x) + k;
//     const float w = sigmoid(ssbo_K.v[nonuniformEXT(idx)]);
//     rgb += w * texture(img_M, (ipos + tap[k] + 0.5)/vec2(textureSize(img_M, 0))).rgb;
//   }
#endif
  uint32_t idx = 16*(ipos.x + ipos.y * imageSize(img_I).x) + 15;
#if (ALPHA_ACTIVATION==ALPHA_CONST)
  const float alpha = 1.0;
#elif (ALPHA_ACTIVATION==ALPHA_PLAIN)
  const float alpha = ssbo_K.v[nonuniformEXT(idx)];
#elif (ALPHA_ACTIVATION==ALPHA_SIGMOID)
  const float alpha = sigmoid(ssbo_K.v[nonuniformEXT(idx)]);
#elif (ALPHA_ACTIVATION==ALPHA_CLAMPED)
  const float alpha = clamp(float(ssbo_K.v[nonuniformEXT(idx)]), 0, 1); // clamp
#endif
#else
  const float alpha = 1.0;
  vec3 rgb = texture(img_M, (ipos + 0.5)/vec2(textureSize(img_M, 0))).rgb;
#endif

  {
    // plot kernels in 8x8 blocks overlaid!
    rgb = rgb.ggg*0.05; // better kernel visibility
    ivec2 c = (ipos / 8) * 8 + 3;
    ivec2 o = ipos - c;
    int tapi = -1;
    for(int i=0;i<15;i++)
      if(all(equal(o, tap[i]))) { tapi = i; break; }
#if (APPLY_ACTIVATION==APPLY_SOFTMAX)
    float den = 0.0;
    float maxK = -1e38; // softmax(x) = softmax(x + c)
    [[unroll]] for(int k=0;k<15;k++)
    {
      uint32_t idx = 16*(c.x + c.y * imageSize(img_I).x) + k;
      maxK = max(maxK, float(ssbo_K.v[nonuniformEXT(idx)]));
    }
    [[unroll]] for(int k=0;k<15;k++)
    {
      uint32_t idx = 16*(c.x + c.y * imageSize(img_I).x) + k;
      const float w = sigma_exp(ssbo_K.v[nonuniformEXT(idx)]-maxK);
      // rgb += w * texture(img_M, (ipos + tap[k] + 0.5)/vec2(textureSize(img_M, 0))).rgb;
      den += w;
    }
    if(tapi >= 0)
    {
      uint32_t idx = 16*(c.x + c.y * imageSize(img_I).x) + tapi;
      float w = sigma_exp(ssbo_K.v[nonuniformEXT(idx)]-maxK);
      rgb = mix(rgb, vec3(1, 0, 1), w);
    }
#else
    if(tapi >= 0)
    {
      float sumw = 0.0;
      [[unroll]] for(int k=0;k<15;k++)
      {
        uint32_t idx = 16*(c.x + c.y * imageSize(img_I).x) + k;
        sumw += float(ssbo_K.v[nonuniformEXT(idx)]);
      }
      uint32_t idx = 16*(c.x + c.y * imageSize(img_I).x) + tapi;
      float w = float(ssbo_K.v[nonuniformEXT(idx)]);
      // w *= w*w;
      w /= max(0.001, sumw);
      rgb = mix(rgb, vec3(4, 4, 0), w);
    }
#endif
  }

  imageStore(img_I, ipos, vec4(clamp(rgb, vec3(-65000.0), vec3(65000.0)), alpha));
}
