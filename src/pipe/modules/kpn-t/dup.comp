#version 460
#extension GL_GOOGLE_include_directive      : enable
#extension GL_EXT_nonuniform_qualifier      : enable
#extension GL_EXT_control_flow_attributes   : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8    : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32   : enable
#include "shared.glsl"
#include "sigmoid.glsl"
#include "config.h"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
// layout(std140, set = 0, binding = 1) uniform params_t { } params;
layout(set = 1, binding = 0) uniform sampler2D img_dEdO;  // dE/dO loss on fine res
layout(set = 1, binding = 1) uniform sampler2D img_I;     // fine input image
layout(set = 1, binding = 2) uniform sampler2D img_Oc;    // coarse input image
layout(set = 1, binding = 3) uniform writeonly image2D img_dEdI;  // dE/dI  fine res derivative
layout(set = 1, binding = 4) uniform writeonly image2D img_dEdOc; // dE/dOc coarse res derivative

// run on coarse res, also and sum up all fine that are connected to the coarse (that's a 6x6 grid)
// dEdI.rgb  = dEdO * dOdI.rgb = dEdO * I.a
// dEdI.a    = dEdO * dOdI.a   = dEdO * (I.rgb - sum6x6(w * Oc.rgb))
// dEdOc.rgb = dEdO * sum6x6(w * (1-I.a))
// dEdOc.a   = 0
void main()
{
  const ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, imageSize(img_dEdOc)))) return;
#ifdef NO_ALIAS
  const ivec2 ipos = opos * 2; // rounded down on fine res
  vec3 dEdOc = vec3(0.0);

  // one coarse pixel contributes to a grid of 3x3 fine pixels
  for(int j=-1;j<2;j++) for(int i=-1;i<2;i++)
  {
    ivec2 tc = ipos + ivec2(i,j);
    vec4 I = texture(img_I, (tc + 0.5)/vec2(textureSize(img_I, 0)));
    vec3 dEdO = texture(img_dEdO, (tc + 0.5)/vec2(textureSize(img_dEdO, 0))).rgb;

    // compute upscaled coarse, just like `up` kernel does:
    vec3 O = texture(img_Oc, vec2(tc + 1.0)/vec2(textureSize(img_I, 0))).rgb;

    // note that this captures wraparounds too (tc may be wrapped, opos is always inside)
    // this mode does not blend, but sum O += a*I, so dO does not depend on alpha
    const float wy = j == 0 ? 1.0 : 0.5;
    const float wx = i == 0 ? 1.0 : 0.5;
    dEdOc += wx * wy * dEdO;
    if(j>=0 && i>=0)
    {
      vec4 dEdI = vec4(dEdO * I.a, dot(dEdO, I.rgb)); // pre-mlp-diff only adds a*I
      if(all(lessThan(tc, imageSize(img_dEdI)))) imageStore(img_dEdI, tc, dEdI);
    }
  }
  // XXX DEBUG: train only one level:
  dEdOc = vec3(0.0); // XXX
  imageStore(img_dEdOc, opos, vec4(dEdOc, 0));






#else
  const ivec2 ipos = opos * 2; // rounded down on fine res
  vec3 dEdOc = vec3(0.0);
#ifdef POST_MLP_DIFF
  vec4 dEdI[4] = {vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0)};
#endif

  // one coarse pixel contributes to a grid of 6x6 fine pixels
  for(int j=-2;j<4;j++) for(int i=-2;i<4;i++)
  {
    ivec2 tc = ipos + ivec2(i,j);
    vec4 I = texture(img_I, (tc + 0.5)/vec2(textureSize(img_I, 0)));
    vec3 dEdO = texture(img_dEdO, (tc + 0.5)/vec2(textureSize(img_dEdO, 0))).rgb;

    // compute upscaled coarse, just like `up` kernel does:
    const float w0[3] = {5.0 / 16.0, 10.0 / 16.0, 1.0 / 16.0};
    const float w1[3] = {1.0 / 16.0, 10.0 / 16.0, 5.0 / 16.0};
    vec3 O = vec3(0.0);

#ifdef POST_MLP_DIFF // O = up(Oc) + I.a * (I.rgb - updown(I.rgb))
    // dEdOc    = dEdO * dO/dOc   = dEdO * sum(w)
    // dEdI.a   = dEdO * dOdI.a   = dEdO * (I.rgb - updown(I.rgb))        = dEdO * (I.rgb - Ismooth)
    // dEdI.rgb = dEdO * dOdI.rgb = dEdO * I.a * (1 - d/dI updown(I.rgb)) = dEdO * I.a * (1 - 1/4 * sum(w))
    vec3 Ismooth = vec3(0.0);
    [[unroll]] for(int jj=-1;jj<=1;jj++) [[unroll]] for(int ii=-1;ii<=1;ii++)
    {
      vec3 rgb = texture(img_Oc, (tc/2 + ivec2(ii,jj) + 0.5)/vec2(textureSize(img_Oc, 0))).rgb;
      float w = ((i & 1) == 0) ? w0[ii+1] : w1[ii+1];
      w      *= ((j & 1) == 0) ? w0[jj+1] : w1[jj+1];
      O += w*rgb;

      const ivec2 idx = 2*(tc/2 + ivec2(ii,jj));
      rgb = texture(img_I, (idx+1.0)/vec2(textureSize(img_I, 0))).rgb; // access in the middle/2x2 lookup
      Ismooth += w*rgb;

      // note that this captures wraparounds too (tc may be wrapped, opos is always inside)
      if((tc + ivec2(ii,jj))/2 == opos)
      {
        dEdOc += w * dEdO;
      }
      {
        // I indices taken into account in the loop this time around:
        // idx + (0,0),(0,1),(1,0),(1,1)
        // I indices we are recording:
        // ipos + (0,0),(0,1),(1,0),(1,1)
        ivec2 off = idx - ipos;
        [[unroll]] for(int u=0;u<2;u++) [[unroll]] for(int v=0;v<2;v++)
        {
          ivec2 o = off + ivec2(u, v);
          if(o.x == 0 && o.y == 0) dEdI[0].rgb -= dEdO * I.a * 0.25 * w;
          if(o.x == 1 && o.y == 0) dEdI[1].rgb -= dEdO * I.a * 0.25 * w;
          if(o.x == 0 && o.y == 1) dEdI[2].rgb -= dEdO * I.a * 0.25 * w;
          if(o.x == 1 && o.y == 1) dEdI[3].rgb -= dEdO * I.a * 0.25 * w;
        }
      }
    }
    if(j>=0 && j<2 && i>=0 && i<2)
    {
      dEdI[2*j+i] += vec4(
          dEdO * I.a, // + stuff added inside the loop, see above
          dot(dEdO, I.rgb - Ismooth));
    }
#else

#if 1 // full 3x3 support
    [[unroll]] for(int jj=-1;jj<=1;jj++) [[unroll]] for(int ii=-1;ii<=1;ii++)
    {
      vec3 rgb = texture(img_Oc, (tc/2 + ivec2(ii,jj) + 0.5)/vec2(textureSize(img_Oc, 0))).rgb;
      float w = ((i & 1) == 0) ? w0[ii+1] : w1[ii+1];
      w      *= ((j & 1) == 0) ? w0[jj+1] : w1[jj+1];
      O += w*rgb;

      // note that this captures wraparounds too (tc may be wrapped, opos is always inside)
#ifdef PRE_MLP_DIFF // this mode does not blend, but sum O += a*I, so dO does not depend on alpha
      if((tc + ivec2(ii,jj))/2 == opos) dEdOc += w * dEdO;
#else
      if((tc + ivec2(ii,jj))/2 == opos) dEdOc += (1.0-I.a) * w * dEdO;
#endif // pre mlp diff
    }
#else
    vec3 rgb = texture(img_Oc, (tc/2 + 0.5)/vec2(textureSize(img_Oc, 0))).rgb;
    float w = 1;
    O += w*rgb;
    if(tc/2 == opos) dEdOc += (1.0-I.a) * w * dEdO;
#endif
    if(j>=0 && j<2 && i>=0 && i<2)
    {
#ifdef PRE_MLP_DIFF
      vec4 dEdI = vec4(dEdO * I.a, dot(dEdO, I.rgb)); // pre-mlp-diff only adds a*I
#else
      vec4 dEdI = vec4(dEdO * I.a, dot(dEdO, I.rgb - O)); // original
#endif
      if(all(lessThan(tc, imageSize(img_dEdI)))) imageStore(img_dEdI, tc, dEdI);
    }
#endif
  }
#ifdef POST_MLP_DIFF
  imageStore(img_dEdI, ipos+ivec2(0,0), dEdI[0]);
  imageStore(img_dEdI, ipos+ivec2(0,1), dEdI[1]);
  imageStore(img_dEdI, ipos+ivec2(1,0), dEdI[2]);
  imageStore(img_dEdI, ipos+ivec2(1,1), dEdI[3]);
#endif
  imageStore(img_dEdOc, opos, vec4(dEdOc, 0));
#endif
}
