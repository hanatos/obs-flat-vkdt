#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(std140, set = 0, binding = 0) uniform global_t
{
  uint frame;
} global;
layout(std140, set = 0, binding = 1) uniform params_t
{
  int generate;
  int tiles;
} params;
layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform sampler2D img_rfi;
layout(set = 1, binding = 2) uniform writeonly image2D img_out;
layout(set = 1, binding = 3) uniform writeonly image2D img_rfo;
layout(std430, set = 1, binding = 4) writeonly buffer ssbo_nab_t { float noise_a; float noise_b; } ssbo_nab; // noise profile a b

void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  ivec2 rpos = ipos;
  int flip = 0;
  ivec2 off = ivec2(0);
  float ev = 0;

  // uint seed = 123456789+133700 * (global.frame/100);
  uint seed = 123456789+133700 * global.frame;
  if(params.tiles != 0 && params.generate != 0)
  {
    ev = -2.0 + 4.0*mrand(seed);
    flip = int(4.0*mrand(seed));
    off = ivec2(textureSize(img_in, 0) * vec2(mrand(seed), mrand(seed)));
  }

  if((flip & 1) != 0) rpos.x = imageSize(img_out).x - 1 - ipos.x;
  if((flip & 2) != 0) rpos.y = imageSize(img_out).y - 1 - ipos.y;
  ivec2 tci = rpos+off;
  vec2 tc = (tci + 0.5)/vec2(textureSize(img_in, 0));
  vec4 rgb = texture(img_in,  tc);
  vec4 ref = texture(img_rfi, tc);
  rgb *= pow(2.0, ev);
  ref *= pow(2.0, ev);

  float noise_a = 0.0;
  float noise_b = 0.0;

  if(params.generate == 2 || params.generate == 4)
  { // add noise according to gaussian/poissonian profile
    // sample noise a/b based on per-frame seed
#if 0 // rasterise line
    if(mrand(seed) < 10.1)
    {
      float phi = mrand(seed) * 2.0*M_PI;
      mat2 R = mat2(cos(phi), -sin(phi), sin(phi), cos(phi));
      vec2 tc = ivec2(R * vec2(ipos));
      // seems for demosaicing, it is crucial to train on these off-grid pixel things.
      // it does learn something per pixel, but very reluctantly so.
      // float wd = 7;//5.0 + mrand(seed) * 20.0;
      float wd = 8.0 + mrand(seed) * 10.0;
      // vec3 lo = 0.55 * vec3(mrand(seed), mrand(seed), mrand(seed));
      // vec3 hi = 0.45 + 0.55*vec3(mrand(seed), mrand(seed), mrand(seed));
      vec3 lo = 0.10 * (0.5-vec3(mrand(seed)));//, mrand(seed), mrand(seed)));
      vec3 hi = 0.5 + 1.0*(0.5-vec3(mrand(seed)));//, mrand(seed), mrand(seed)));
      if(mrand(seed) < 0.5)
      {
        vec3 tmp = hi;
        hi = lo;
        lo = tmp;
      }
      float n = mrand(seed)*7;
      // ref.rgb = smoothstep(lo, hi, vec3(pow(2.0*abs(mod(tc.x, wd)/wd - 0.5), n)));
      ref.rgb = mix(lo, hi, bvec3(mod(tc.x, wd)/wd > 0.5)); // hard edges
    }
#endif
    const float scale = 65535.0;
    noise_a = 1000.0 * scale * mrand(seed);
    noise_b = 1000.0 * mrand(seed);
    // noise_a = noise_b = 200.0;// easy problem..?
    seed += 7654*ipos.x + 1357900*ipos.y;
    seed = uint((1<<29)*mrand(seed));
    vec4 z = vec4(warp_gaussian(vec2(mrand(seed), mrand(seed))),
                  warp_gaussian(vec2(mrand(seed), mrand(seed))));
    rgb.rgb = ref.rgb + z.rgb * sqrt(noise_a + scale*max(ref.rgb, vec3(0))*noise_b)/scale;
  }

  if(params.generate == 3 || params.generate == 4)
  { // bayer mosaic the reference
    if(((ipos.x + ipos.y) & 1) == 1) rgb.rgb = rgb.ggg;
    else if((ipos.y & 1) == 1)       rgb.rgb = rgb.bbb;
    else                             rgb.rgb = rgb.rrr;
  }

  if(ipos.x == 0 && ipos.y == 0)
  { // pass on to training in kpn-t
    ssbo_nab.noise_a = noise_a;
    ssbo_nab.noise_b = noise_b;
  }
  
  rgb.w = ref.w = 1.0;
  imageStore(img_out, ipos, rgb);
  imageStore(img_rfo, ipos, ref);
}
