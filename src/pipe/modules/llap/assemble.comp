#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"
#include "llap.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(push_constant, std140) uniform push_t
{
  uint num_gamma;
  uint first;
} push;

layout( // input f16 buffer y coarse of current recon
    set = 1, binding = 0
) uniform sampler2D img_coarse;

// we need 6 curves to avoid aliasing:
layout(set = 1, binding = 1) uniform sampler2D img_l0[];
layout(set = 1, binding = 2) uniform sampler2D img_l1[];
layout( // output buffer y finer level of output
    set = 1, binding = 3
) uniform writeonly image2D img_out;

float gauss_expand(sampler2D img_in, ivec2 opos)
{
#if 1
  vec2 ipos = (opos*0.5 + 0.5)/vec2(textureSize(img_in, 0));
  return sample_soft(img_in, ipos).r; // 121ms
  // return textureLod(img_in, ipos, 0).r;  // 26ms
#else // 82ms (timings on intel hd5500)
  float c = 0.0f;
  const float w[5] = {1.0f/16.0f, 4.0f/16.0f, 6.0f/16.0f, 4.0f/16.0f, 1.0f/16.0f};
  ivec2 ipos = opos/2;
  const int d = (opos.x&1) + 2*(opos.y&1);
  if(d == 0)
  { // both are even, 3x3 stencil
    for(int ii=-1;ii<=1;ii++) for(int jj=-1;jj<=1;jj++)
      c += texelFetch(img_in, ipos+ivec2(ii,jj), 0).r * w[2*jj+2]*w[2*ii+2];
  }
  else if(d == 1)
  { // i is odd, 2x3 stencil
    for(int ii=0;ii<=1;ii++) for(int jj=-1;jj<=1;jj++)
      c += texelFetch(img_in, ipos+ivec2(ii,jj), 0).r * w[2*jj+2]*w[2*ii+1];
  }
  else if(d == 2)
  { // j is odd, 3x2 stencil
    for(int ii=-1;ii<=1;ii++) for(int jj=0;jj<=1;jj++)
      c += texelFetch(img_in, ipos+ivec2(ii,jj), 0).r * w[2*jj+1]*w[2*ii+2];
  }
  else // d == 3
  { // both are odd, 2x2 stencil
    for(int ii=0;ii<=1;ii++) for(int jj=0;jj<=1;jj++)
      c += texelFetch(img_in, ipos+ivec2(ii,jj), 0).r * w[2*jj+1]*w[2*ii+1];
  }
  return 4.0f*c;
#endif
}

// assemble
void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  // upsample img_coarse
  float res;
  if(push.first > 0)
    res = gauss_expand(img_l1[push.num_gamma], opos);
  else
    res = gauss_expand(img_coarse, opos);
  // fetch input pixel
  float v = texelFetch(img_l0[push.num_gamma], opos, 0).r;
  int hi = gamma_hi_from_v(v);
  int lo = hi-1;
  // compute laplacian for brightness level g by upsampling l0 and subtracting l1
  // blend together and add to upsampled coarse
  float gamma_lo = gamma_from_i(lo);
  float gamma_hi = gamma_from_i(hi);
  float a = clamp((v - gamma_lo)/(gamma_hi-gamma_lo), 0.0f, 1.0f);
  float l0, l1;
  // stupid dance to avoid nonuniformEXT() not available on ancient intel:
  // l0 = texelFetch(img_l0[nonuniformEXT(hi-1)], opos, 0).r - gauss_expand(img_l1[nonuniformEXT(hi-1)], opos);
  // l1 = texelFetch(img_l0[nonuniformEXT(hi  )], opos, 0).r - gauss_expand(img_l1[nonuniformEXT(hi  )], opos);
  for(int g=0;g<push.num_gamma;g++)
  {
    if(hi == g)
    {
      l0 = texelFetch(img_l0[g-1], opos, 0).r - gauss_expand(img_l1[g-1], opos);
      l1 = texelFetch(img_l0[g  ], opos, 0).r - gauss_expand(img_l1[g  ], opos);
    }
  }
  
  imageStore(img_out, opos, vec4(res + l0 * (1.0f-a) + l1 * a));
}

