#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#extension GL_EXT_ray_tracing             : enable
#extension GL_EXT_ray_query               : enable
#extension GL_EXT_shader_atomic_float     : enable

#include "shared.glsl"
#include "shared/render3d.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{ 
  int frame;
} global;

layout(std140, set = 0, binding = 1) uniform params_t
{ 
  vec4 cam_x;
  vec4 cam_w;
  int spp;
} params;

layout(set = 1, binding = 0) buffer buf_fb_t { float v[]; } buf_fb;
#include "shared/fb.glsl"
layout(set = 1, binding = 1) uniform sampler2D img_blue;
layout(set = 1, binding = 2) uniform sampler2D img_tex[];
layout(set = 1, binding = 3) uniform writeonly image2D img_aov;
layout(set = 2, binding = 0) uniform accelerationStructureEXT rt_accel;
layout(set = 2, binding = 1) buffer buf_vtx_t { rtgeo_vtx_t v[]; } buf_vtx[];

#if 1
float rand3(vec3 v) {
    return fract(sin(dot(v + vec3(-8.5123, 23.2156, 0.0), vec3(12.9898, 6.233, 0.84261))) * 47583.5453123);
}
float noise3lin(in vec3 uvx) {
    vec3 f = fract(uvx);
    vec3 i = floor(uvx);

    float a1 = rand3(i);
    float b1 = rand3(i + vec3(0.0, 1.0, 0.0));
    float c1 = rand3(i + vec3(1.0, 0.0, 0.0));
    float d1 = rand3(i + vec3(1.0, 1.0, 0.0));
    float a2 = rand3(i + vec3(0.0, 0.0, 1.0));
    float b2 = rand3(i + vec3(0.0, 1.0, 1.0));
    float c2 = rand3(i + vec3(1.0, 0.0, 1.0));
    float d2 = rand3(i + vec3(1.0, 1.0, 1.0));

    vec3 u = -2. * f * f * f + 3. * f * f;

    float a = mix(a1, a2, f.z);
    float b = mix(b1, b2, f.z);
    float c = mix(c1, c2, f.z);
    float d = mix(d1, d2, f.z);

    return mix(mix(a, b, u.y), mix(c, d, u.y), u.x);
}
float fbm3(in vec3 uvx) {
    float sum = 0.0;
    float amp = 0.0;
    float persistence = 0.7;
    vec3 stz = uvx;

    for (int i = 0; i < 8; ++i) {
        amp = amp / persistence + noise3lin(stz);
        sum = sum / persistence + 1.;
        stz *= 2.;
    }
    return amp / sum;
}
#endif

void prepare_intersection(
    rayQueryEXT rq,
    vec3 w,
    inout vec3 x,
    out vec3 n,
    out vec2 st,
    out uint mat,
    out uint mfb)
{ // access and unpack geometry data
  uint pi = 3*rayQueryGetIntersectionPrimitiveIndexEXT(rq, true);
  uint it = rayQueryGetIntersectionInstanceIdEXT(rq, true);
  mat = buf_vtx[it].v[pi+0].tex;
  mfb = buf_vtx[it].v[pi+1].tex;
  vec3 v0 = vec3(buf_vtx[it].v[pi+0].x, buf_vtx[it].v[pi+0].y, buf_vtx[it].v[pi+0].z);
  vec3 v1 = vec3(buf_vtx[it].v[pi+1].x, buf_vtx[it].v[pi+1].y, buf_vtx[it].v[pi+1].z);
  vec3 v2 = vec3(buf_vtx[it].v[pi+2].x, buf_vtx[it].v[pi+2].y, buf_vtx[it].v[pi+2].z);
  vec3 n0 = geo_decode_normal(buf_vtx[it].v[pi+0].n);
  vec3 n1 = geo_decode_normal(buf_vtx[it].v[pi+1].n);
  vec3 n2 = geo_decode_normal(buf_vtx[it].v[pi+2].n);
  vec3 b;
  b.yz = rayQueryGetIntersectionBarycentricsEXT(rq, true);
  b.x = 1.0-b.z-b.y;
#if 0
  float t = rayQueryGetIntersectionTEXT(rq, true);
  x += t*w;
#else
  x = b.x * v0 + b.y * v1 + b.z * v2;
#endif
  n = normalize(b.x * n0 + b.y * n1 + b.z * n2);
  // n = normalize(cross(v1-v0, v2-v0));
  // if(dot(w, n) < 0) n = -n;
  vec2 st0 = unpackHalf2x16(buf_vtx[it].v[pi+0].st);
  vec2 st1 = unpackHalf2x16(buf_vtx[it].v[pi+1].st);
  vec2 st2 = unpackHalf2x16(buf_vtx[it].v[pi+2].st);
  st = b.x * st0 + b.y * st1 + b.z * st2;
}

vec3 colourtex(vec2 st)
{
  if((fract(st.x * 200) < 0.5) ^^ (fract(st.y * 200) < 0.5))
    return vec3(0.3);
  return vec3(0.4);
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  // if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  uint seed = 19937 * global.frame + 133700000 * ipos.x + ipos.y * 70000;
  // blue noise dither mask
  // const ivec2 rp = ivec2(mod(ipos, textureSize(img_blue, 0)));

  vec3 acc = vec3(0);
  vec4 aov = vec4(1, 0, 1, 1.0);

  // for(int s=0;s<params.spp;s++)
  {
    // vec4 rand = xrand(seed, rp);
    vec4 rand = vec4(mrand(seed), mrand(seed), mrand(seed), mrand(seed));
    seed = uint(70000 * rand.x);
    float frame = global.frame;// + 0.5*rand.x; // 180 degree shutter
    vec3 rgb = vec3(1.0);
    vec3 x, w, n; // ray position, direction, hit normal
    vec2 st;      // texture coordinates
    { // camera setup:
      x = params.cam_x.xyz;
      vec3 f = params.cam_w.xyz;
      vec3 up = vec3(0, 0, 1);
      vec3 r = normalize(cross(f, up));
      vec3 t = normalize(cross(f, r)) * float(imageSize(img_aov).y)/float(imageSize(img_aov).x);

      vec2 uv = (ipos+rand.yz)/imageSize(img_aov) - 0.5;
      // vec2 uv = (ipos+0.5)/imageSize(img_aov) - 0.5;
      w = normalize(0.45*f + r*uv.x + t*uv.y);
    }

    aov.rgb = (1.0+w)/2.0;

    for(int i=0;i<4;i++)
    { // for a number of bounces
      rayQueryEXT rq;
      rayQueryInitializeEXT(rq, rt_accel,
         gl_RayFlagsNoneEXT,
         // gl_RayFlagsTerminateOnFirstHitEXT,// | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT,
          0xFF, x, 1e-3, w, 100000.0);
      while(rayQueryProceedEXT(rq)) {
        if (rayQueryGetIntersectionTypeEXT(rq, false) == gl_RayQueryCandidateIntersectionTriangleEXT)
          rayQueryConfirmIntersectionEXT(rq);
      }
      if(rayQueryGetIntersectionTypeEXT(rq, true) == gl_RayQueryCommittedIntersectionTriangleEXT)
      {
        uint mat, mfb;
        prepare_intersection(rq, w, x, n, st, mat, mfb);
        vec3 ws = sample_cos(vec2(mrand(seed), mrand(seed)));
        if(dot(n,w) > 0) n = -n;
        vec3 du, dv, up = vec3(1,0,0);
        if(abs(n.x) > abs(n.y)) up = vec3(0,1,0);
        du = normalize(cross(up, n));
        dv = normalize(cross(du, n));
        w = ws.x * du + ws.y * dv + ws.z * n;
        x += 0.001 * (n + w);
        // rgb *= colourtex(st);//0.2;
        float tx = fbm3(x);
        // tx = sqrt(tx);
        // rgb *= clamp(tx*0.4, 0.0, 1.0);
        mat = 3;
        vec3 diffcol = pow(texture(img_tex[nonuniformEXT(mat%7)], st).rgb, vec3(2.0));
        rgb *= diffcol * tx;
        if(i == 0) aov.rgb = vec3(st, 1.0);//tx*diffcol;
        // aov.rgb = (1.0+n)/2.0;
        // aov.rgb = x / (1.0 + x);
        // aov.rgb = vec3(mat);
        // if(mfb > 0) acc += rgb / float(params.spp); // found something emissive
      }
      else
      {
        vec3 L = pow(1.0+dot(vec3(0,0,1), w), 3.0) * 0.5 * vec3(0.1, 0.5, 1.0); // escaped to environment map
        acc += rgb*L / float(params.spp);
        // aov.rgb = (1.0+w)/2.0;
        break;
      }
    }
  } // end spp

  fb_set(ipos, imageSize(img_aov), acc);
  imageStore(img_aov, ipos, aov);
}
