#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#extension GL_EXT_ray_tracing             : enable
#extension GL_EXT_ray_query               : enable
#extension GL_EXT_shader_atomic_float     : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64: enable

#include "shared.glsl"
#include "shared/render3d.glsl"
#include "colour.glsl"
#include "upsample.glsl"
#include "complex.glsl"
#include "fresnel.glsl"
#include "volume-fwd.glsl"
#include "volume.glsl"
#include "env.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{ 
  int frame;
} global;

layout(std140, set = 0, binding = 1) uniform params_t
{ 
  vec4 cam_x;
  vec4 cam_w;
  int spp;
} params;

layout(push_constant, std140) uniform push_t
{
  int wd;
  int ht;
} push;

layout(set = 1, binding = 0) buffer buf_fb_t { float v[]; } buf_fb;
#include "shared/fb.glsl"
layout(set = 1, binding = 1) uniform sampler2D img_blue;
layout(set = 1, binding = 2) uniform sampler2D img_tex[];
layout(set = 1, binding = 3) uniform writeonly image2D img_aov;
layout(set = 1, binding = 4) uniform sampler2D img_env;
layout(set = 2, binding = 0) uniform accelerationStructureEXT rt_accel;
layout(set = 2, binding = 1) buffer buf_vtx_t { rtgeo_vtx_t v[]; } buf_vtx[];

// importance sample the blackman harris pixel filter.
// has 1.5px radius support
vec2 filter_bh_sample(vec2 rand)
{
  vec2 res = vec2(cos(rand.y*M_PI*2.0), sin(rand.y*M_PI*2.0));
  float r = 0.943404 * asin(0.636617 * asin(sqrt(rand.x))); // surprisingly good fit to inverse cdf
  return res * r;
}

// xorshift64star
float rand64(inout uint64_t x)
{
  x ^= x >> 12;
  x ^= x << 25;
  x ^= x >> 27;
  return float((x * 0x2545F4914F6CDD1Dul)>>32)/4294967296.0;
}

#if 1
float rand3(vec3 v) {
    return fract(sin(dot(v + vec3(-8.5123, 23.2156, 0.0), vec3(12.9898, 6.233, 0.84261))) * 47583.5453123);
}
float noise3lin(in vec3 uvx) {
    vec3 f = fract(uvx);
    vec3 i = floor(uvx);

    float a1 = rand3(i);
    float b1 = rand3(i + vec3(0.0, 1.0, 0.0));
    float c1 = rand3(i + vec3(1.0, 0.0, 0.0));
    float d1 = rand3(i + vec3(1.0, 1.0, 0.0));
    float a2 = rand3(i + vec3(0.0, 0.0, 1.0));
    float b2 = rand3(i + vec3(0.0, 1.0, 1.0));
    float c2 = rand3(i + vec3(1.0, 0.0, 1.0));
    float d2 = rand3(i + vec3(1.0, 1.0, 1.0));

    vec3 u = -2. * f * f * f + 3. * f * f;

    float a = mix(a1, a2, f.z);
    float b = mix(b1, b2, f.z);
    float c = mix(c1, c2, f.z);
    float d = mix(d1, d2, f.z);

    return mix(mix(a, b, u.y), mix(c, d, u.y), u.x);
}
float fbm3(in vec3 uvx) {
    float sum = 0.0;
    float amp = 0.0;
    float persistence = 0.7;
    vec3 stz = uvx;

    for (int i = 0; i < 8; ++i) {
        amp = amp / persistence + noise3lin(stz);
        sum = sum / persistence + 1.;
        stz *= 2.;
    }
    return amp / sum;
}
#endif

void prepare_intersection(
    rayQueryEXT rq,
    vec3 w,
    inout vec3 x,
    out vec3 n,
    out vec2 st,
    out uint mat,
    out uint mfb)
{ // access and unpack geometry data
  uint pi = 3*rayQueryGetIntersectionPrimitiveIndexEXT(rq, true);
  uint it = rayQueryGetIntersectionInstanceIdEXT(rq, true);
  mat = buf_vtx[it].v[pi+0].tex;
  mfb = buf_vtx[it].v[pi+1].tex;
  vec3 v0 = vec3(buf_vtx[it].v[pi+0].x, buf_vtx[it].v[pi+0].y, buf_vtx[it].v[pi+0].z);
  vec3 v1 = vec3(buf_vtx[it].v[pi+1].x, buf_vtx[it].v[pi+1].y, buf_vtx[it].v[pi+1].z);
  vec3 v2 = vec3(buf_vtx[it].v[pi+2].x, buf_vtx[it].v[pi+2].y, buf_vtx[it].v[pi+2].z);
  vec3 n0 = geo_decode_normal(buf_vtx[it].v[pi+0].n);
  vec3 n1 = geo_decode_normal(buf_vtx[it].v[pi+1].n);
  vec3 n2 = geo_decode_normal(buf_vtx[it].v[pi+2].n);
  vec3 b;
  b.yz = rayQueryGetIntersectionBarycentricsEXT(rq, true);
  b.x = 1.0-b.z-b.y;
#if 0
  float t = rayQueryGetIntersectionTEXT(rq, true);
  x += t*w;
#else
  x = mat3(v0, v1, v2) * b;
#endif
  // n = normalize(mat3(n0, n1, n2) * b);
  // n = n2;
  // n = normalize(cross(v1-v0, v2-v0));
  // if(dot(w, n) < 0) n = -n;
  vec2 st0 = unpackHalf2x16(buf_vtx[it].v[pi+0].st);
  vec2 st1 = unpackHalf2x16(buf_vtx[it].v[pi+1].st);
  vec2 st2 = unpackHalf2x16(buf_vtx[it].v[pi+2].st);
  st = mat3x2(st0, st1, st2) * b;
  // if(false)
  { // now fix shading normals below horizon and terminator problem:
    if(dot(w,n0) > 0) n0 -= w*dot(w,n0);
    if(dot(w,n1) > 0) n1 -= w*dot(w,n1);
    if(dot(w,n2) > 0) n2 -= w*dot(w,n2);
    n = normalize(mat3(n0, n1, n2) * b);
    vec3 tmpu = x - v0, tmpv = x - v1, tmpw = x - v2;
    float dotu = min(0.0, dot(tmpu, n0));
    float dotv = min(0.0, dot(tmpv, n1));
    float dotw = min(0.0, dot(tmpw, n2));
    tmpu -= dotu*n0;
    tmpv -= dotv*n1;
    tmpw -= dotw*n2;
    x += mat3(tmpu, tmpv, tmpw) * b;
  }
}

vec3 colourtex(vec2 st)
{
  if((fract(st.x * 200) < 0.5) ^^ (fract(st.y * 200) < 0.5))
    return vec3(0.3);
  return vec3(0.4);
}

vec4 dithermask(vec4 xi, ivec2 rp)
{
  return fract(xi + texelFetch(img_blue, rp, 0));
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, ivec2(push.wd, push.ht)))) return;

  uint64_t seed = 19937 * global.frame + 133700000 * ipos.x + ipos.y * 70007;
  // blue noise dither mask
  const ivec2 rp = ivec2(ipos % ivec2(textureSize(img_blue, 0)));

  vec3 acc_col = vec3(0.0);
  vec4 aov = vec4(1, 0, 1, 1.0);
  for(int s=0;s<params.spp;s++)
  {
    vec4 acc = vec4(0); // value of our estimator, accumulate this
    vec4 hrp = vec4(1); // hero wavelength p, only deviates from 1 if pdf is different per wavelength
    // vec4 rand = xrand(seed, rp);
    vec4 rand = vec4(rand64(seed), rand64(seed), rand64(seed), rand64(seed));
    seed = uint64_t(70000 * rand.x);
    float frame = global.frame;// + 0.5*rand.x; // 180 degree shutter
    vec4 thr = vec4(1.0);
    // dithermask shows *no* difference for stratified hwl:
    uint64_t seed2 = 19937*global.frame;
    vec4 lambda = colour_sample_lambda(dithermask(vec4(rand64(seed2)), rp), thr, hrp);
    // vec4 lambda = colour_sample_lambda(dithermask(vec4(rand64(seed2)), rp).xxxx, thr, hrp);
    // mono wl:
    // vec4 lambda = colour_sample_lambda(vec4(rand64(seed)), thr, hrp);
    // vec4 lambda = colour_sample_lambda(vec4(rand64(seed), rand64(seed), rand64(seed), rand64(seed)), thr, hrp);
    vec3 x, w, n; // ray position, direction, hit normal
    vec2 st;      // texture coordinates
    { // camera setup:
      x = params.cam_x.xyz;
      vec3 f = params.cam_w.xyz;
      vec3 up = vec3(0, 0, 1);
      vec3 r = normalize(cross(f, up));
      vec3 t = normalize(cross(f, r)) * float(push.ht)/float(push.wd);

      vec2 uv = (ipos+filter_bh_sample(rand.yz))/vec2(push.wd, push.ht) - 0.5;
      // vec2 uv = (ipos+0.5)/vec2(push.wd, pus.ht) - 0.5;
      w = normalize(0.45*f + r*uv.x + t*uv.y);
    }

    aov.rgb = (1.0+w)/2.0;

    for(int i=0;i<5;i++)
    { // for a number of bounces
      const float dist = volume_sample_dist(x, w, rand64(seed));
      rayQueryEXT rq;
      rayQueryInitializeEXT(rq, rt_accel,
         gl_RayFlagsNoneEXT,
         // gl_RayFlagsTerminateOnFirstHitEXT,// | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT,
          0xFF, x, 1e-3, w, dist);
      while(rayQueryProceedEXT(rq)) {
        if (rayQueryGetIntersectionTypeEXT(rq, false) == gl_RayQueryCandidateIntersectionTriangleEXT)
          rayQueryConfirmIntersectionEXT(rq);
      }
      if(rayQueryGetIntersectionTypeEXT(rq, true) == gl_RayQueryCommittedIntersectionTriangleEXT)
      {
        uint mat, mfb;
        prepare_intersection(rq, w, x, n, st, mat, mfb);
        if(dot(n,w) > 0) n = -n;
        vec3 du, dv, up = vec3(1,0,0);
        if(abs(n.x) > abs(n.y)) up = vec3(0,1,0);
        du = normalize(cross(up, n));
        dv = normalize(cross(du, n));
        // vec3 ws = sample_cos(vec2(rand64(seed), rand64(seed)));
        // vec3 wo = ws.x * du + ws.y * dv + ws.z * n;
        // rgb *= colourtex(st);//0.2;
        // tx = sqrt(tx);
        // rgb *= clamp(tx*0.4, 0.0, 1.0);
        // float bsdf = bsdf_rough_eval(w, du, dv, n, wo, vec2(0.02, 0.02));
        if(i == 0) aov.rgb = vec3(dot(-w, n));//vec3(st, 1.0);//tx*diffcol;

        mat = 2;
        // float roughness = pow(fbm3(x), 2);
        vec4 diffcol = rgb_to_spectrum(pow(texture(img_tex[nonuniformEXT(mat%7)],
                // st
                x.xy*0.1
                ).rgb, vec3(2.0)), lambda);
        float roughness = max(0.01, 0.15*(1.0-diffcol.r));

        vec3 wo;
#if 0 // default cosine
        {
          vec3 ws = sample_cos(vec2(rand64(seed), rand64(seed)));
          // uint s2 = uint(seed);
          // vec3 ws = sample_cos(vec2(mrand(s2), mrand(s2)));
          wo = mat3(du, dv, n) * ws;
          float pdf = ws.z / M_PI;
          vec3 h = normalize(wo - w);
          vec4 f = ws.z * bsdf_rough_eval(w, du, dv, n, wo, vec2(roughness)) * fresnel(0, lambda, 1.0, dot(wo, h));
          thr *= f/pdf;
        }
#endif
#if 0 // importance sampling the bsdf
        {
          float weight = 1.0;
          wo = bsdf_rough_sample(w, du, dv, n, vec2(roughness), vec2(rand64(seed), rand64(seed)), weight);
          vec3 h = normalize(wo - w);
          thr *= fresnel(0, lambda, 1.0, dot(wo, h));
          // weight = max(0.0, dot(n, wo))*bsdf_rough_eval(w, du, dv, n, wo, vec2(roughness)) / bsdf_rough_pdf(w, du, dv, n, wo, vec2(roughness));
          thr *= weight;
        }
#endif
#if 0 // envmap sampling
        {
          float weight = 1.0;
          wo = env_sample(vec2(rand64(seed), rand64(seed)), img_env, weight);
          thr *= max(0.0, dot(n, wo))*bsdf_rough_eval(w, du, dv, n, wo, vec2(roughness));
          thr *= weight;
        }
#endif
#if 1 // resampling thing:
        { // do both and resample!
          // p_hat = env * brdf * cos
          // p0 = bsdf_pdf, p1 = env_pdf
          // w0 = p_hat / p0, w1 = p_ht / p1
          // thr = f / p_hat * 1/2 (w0 + w1)
          // bsdf: w = X * env
          // env : w = X * bsdf * cos
          float w0 = 1.0, w1 = 1.0;

          // bsdf sampling
          vec3 wo0 = bsdf_rough_sample(w, du, dv, n, vec2(roughness), vec2(rand64(seed), rand64(seed)), w0);
          float p0 = bsdf_rough_pdf(w, du, dv, n, wo0, vec2(roughness));
          vec3 h0 = normalize(wo0 - w);
          float ph0 = p0 * env_pdf(wo0, img_env) * (dot(wo0,n) > 0 ? 1 : 0) * dot(vec4(1), fresnel(0, lambda, 1.0, dot(wo0, h0)));
          w0 = ph0 / p0;

          // envmap sampling
          vec3 wo1 = env_sample(vec2(rand64(seed), rand64(seed)), img_env, w1);
          float p1 = 1.0/w1;
          vec3 h1 = normalize(wo1 - w);
          float ph1 = p1 * bsdf_rough_pdf(w, du, dv, n, wo1, vec2(roughness)) * (dot(wo1,n) > 0 ? 1 : 0) * dot(vec4(1), fresnel(0, lambda, 1.0, dot(wo1, h1)));
          w1 = ph1 / p1;

          if(rand64(seed) < w0/(w0+w1))
          {
            wo = wo0;
            vec4 f = bsdf_rough_eval(w, du, dv, n, wo, vec2(roughness)) * max(0, dot(wo, n)) * fresnel(0, lambda, 1.0, dot(wo, h0));
            thr *= f / ph0 * 0.5 * (w0 + w1);
          }
          else
          {
            wo = wo1;
            vec4 f = bsdf_rough_eval(w, du, dv, n, wo, vec2(roughness)) * max(0, dot(wo, n)) * fresnel(0, lambda, 1.0, dot(wo, h1));
            thr *= f / ph1 * 0.5 * (w0 + w1);
          }
        }
#endif
        if(i == 0) aov.rgb = (1.0+n)/2.0;
        // if(i == 0) aov.rgb = fract(.04+x);
        if(dot(wo,n) <= 0.0) break; // sampled under surface
        // thr *= bsdf * M_PI / ws.z;
        // vec3 h = normalize(wo - w);
        // thr *= X * fresnel(0, lambda, 1.0, dot(wo, h));
        // thr *= diffcol;// * tx;
        // aov.rgb = (1.0+n)/2.0;
        // aov.rgb = x / (1.0 + x);
        // aov.rgb = vec3(mat);
        // if(mfb > 0) acc += rgb / float(params.spp); // found something emissive
        x += 0.001 * n; // TODO only for convex regions where the terminator hack doesn't work
        w = wo;
      }
      else if(dist > 1000.0)
      { // escaped to environment map
        vec3 env = env_lookup(w, img_env);
        vec4 L = rgb_to_spectrum(env, lambda);
        // vec4 Lc = colour_blackbody(lambda, 6504.0); // not quite D65
        // vec4 L = pow(1.0+dot(vec3(0,0,1), w), 3.0) * 0.5 * Lc;
        acc += thr*L / float(params.spp);
        // aov.rgb = (1.0+w)/2.0;
        break;
      }
      else
      { // scattering in medium
        thr *= rgb_to_spectrum(vec3(1.0, 0.97, 0.6), lambda); // scattering albedo
        x += dist * w;
#if 0 // sample phase function
        const float cosu = volume_sample_phase_function_cos(vec2(rand64(seed),rand64(seed)));
        vec3 du, dv, up = vec3(1,0,0);
        if(abs(n.x) > abs(n.y)) up = vec3(0,1,0);
        du = normalize(cross(up, w));
        dv = normalize(cross(du, w));
        const float phi = 2.0*M_PI*rand64(seed);
        w = cosu * w + sqrt(1.0-cosu*cosu) * (sin(phi) * du + cos(phi) * dv);
#endif
#if 1 // resample env + phase function
        float w0 = 1.0, w1 = 1.0;

        // phase sampling
        const float cosu = volume_sample_phase_function_cos(vec2(rand64(seed),rand64(seed)));
        float p0 = volume_phase_function(cosu);
        vec3 du, dv, up = vec3(1,0,0);
        if(abs(n.x) > abs(n.y)) up = vec3(0,1,0);
        du = normalize(cross(up, w));
        dv = normalize(cross(du, w));
        const float phi = 2.0*M_PI*rand64(seed);
        vec3 wo0 = cosu * w + sqrt(1.0-cosu*cosu) * (sin(phi) * du + cos(phi) * dv);
        float ph0 = p0 * env_pdf(wo0, img_env);
        w0 = ph0 / p0;

        // envmap sampling
        vec3 wo1 = env_sample(vec2(rand64(seed), rand64(seed)), img_env, w1);
        float p1 = 1.0/w1;
        float ph1 = p1 * volume_phase_function(dot(wo1, w));
        w1 = ph1 / p1;

        if(rand64(seed) < w0/(w0+w1))
        {
          w = wo0;
          vec4 f = vec4(p0);
          thr *= f / ph0 * 0.5 * (w0 + w1);
        }
        else
        {
          w = wo1;
          vec4 f = vec4(w1);
          thr *= f / ph1 * 0.5 * (w0 + w1);
        }
#endif
      }
    }
    acc_col += colour_to_rgb(acc, lambda, hrp);
  } // end spp

  fb_set(ipos, ivec2(push.wd, push.ht), acc_col);
  imageStore(img_aov, ipos, aov);
}
