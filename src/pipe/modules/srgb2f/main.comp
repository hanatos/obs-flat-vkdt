#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout( // input uint8 buffer rgba
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f16 buffer rgb
    set = 1, binding = 1
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec4 rgba = texelFetch(img_in, ipos, 0).rgba;
  // undo srgb tone curve
  rgba.r = rgba.r <= 0.04045 ? rgba.r/12.92 : pow((rgba.r+0.055)/(1+0.055), 2.4);
  rgba.g = rgba.g <= 0.04045 ? rgba.g/12.92 : pow((rgba.g+0.055)/(1+0.055), 2.4);
  rgba.b = rgba.b <= 0.04045 ? rgba.b/12.92 : pow((rgba.b+0.055)/(1+0.055), 2.4);
  // convert linear rec709 to linear rec2020 (very similar to ACES ap1 indeed,
  // except slight difference in green + D65 instead of D60)
  mat3 M = mat3(
      0.62750375, 0.06910828, 0.01639406,
      0.32927542, 0.91951916, 0.08801125,
      0.04330266, 0.0113596 , 0.89538035);
  // convert linear rec709 to ACES ap1
  // mat3 M = mat3(
  //     0.61319, 0.33951, 0.04737,
  //     0.07021, 0.91634, 0.01345,
  //     0.02062, 0.10957, 0.86961);
  imageStore(img_out, ipos, vec4(M * rgba.rgb, 1.0));
}
