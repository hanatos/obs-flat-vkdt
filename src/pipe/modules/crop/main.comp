#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  mat3 H;
  float r0, r1, r2, r3;
  float crop_x, crop_X;
  float crop_y, crop_Y;
} params;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  // go through output pixels and determine input pixel.
  // this means we go through the operations in reverse order:
  // crop, rotate, perspective correction.
  vec2 ts_in  = textureSize(img_in, 0);

  vec2 xy = vec2(ipos.xy)+0.5;

  // 1) crop: adjust output coordinates by top left corner:
  vec2 co = vec2(params.crop_x, params.crop_y);
  xy += co * ts_in;

  // 2) rotate: center of the rotation is the center of the output image
  mat2 T = mat2(params.r0, params.r1, params.r2, params.r3);
  xy = T * (xy - ts_in*.5) + ts_in*.5;

  // 3) perspective correction
  vec3 rdh = (params.H * vec3(xy.xy, 1.0)).xyz;
  vec2 rd = rdh.xy / rdh.z;

  rd /= ts_in;
  vec4 rgba;
  if(any(lessThan(rd, vec2(0.))) || any(greaterThanEqual(rd, vec2(1.))))
    rgba = vec4(0.);
  else if(params.r0 != 1.0)
    // catmull rom is a little slower (especially on intel) but results
    // in a bit more acuity:
    rgba = sample_catmull_rom(img_in, rd);
  else
    // rounding texture access:
    // rgba = texelFetch(img_in, ivec2(rd*ts_in), 0);
    // bilinear or pixel center for identity transform (identical to texelFetch above):
    rgba = texture(img_in, rd);
  imageStore(img_out, ipos, vec4(rgba.rgb, 1));
}

