#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(std140, set = 0, binding = 1) uniform params_t
{
  float t;
} params;
layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;
  float v = texelFetch(img_in, ipos, 0).r;
  // TODO: xtrans
  float v0 = texture(img_in, (ipos + 0.5 + vec2(-2.0,  0.0))/vec2(textureSize(img_in, 0))).r;
  float v1 = texture(img_in, (ipos + 0.5 + vec2( 2.0,  0.0))/vec2(textureSize(img_in, 0))).r;
  float v2 = texture(img_in, (ipos + 0.5 + vec2( 0.0, -2.0))/vec2(textureSize(img_in, 0))).r;
  float v3 = texture(img_in, (ipos + 0.5 + vec2( 0.0,  2.0))/vec2(textureSize(img_in, 0))).r;
  // float M = max(max(v0, v1), max(v2, v3));
  float M = (v0 + v1 + v2 + v3)/4.0;
  if(v - M > params.t) v = M;
  imageStore(img_out, ipos, vec4(vec3(v), 1));
}
