#version 460
#extension GL_GOOGLE_include_directive       : enable
#extension GL_KHR_shader_subgroup_basic      : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

#include "shared.glsl"
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float bound_x, bound_y, bound_z;
  float loss;
} params;

layout(push_constant, std140) uniform push_t
{
  int size;
} push;

layout(set = 1, binding = 0, std430) buffer buf_in  { float vin[]; };
layout(set = 1, binding = 1, std430) buffer buf_out { float vout[]; };

// gl_SubgroupSize is not a constant (intel) so we work under the risky assumption
// that it'll be a minimum of 4:
const uint shm_size = gl_WorkGroupSize.x / 4; // really divide by gl_SubgroupSize;
shared float shm_loss[shm_size];
shared float shm_w[shm_size];

void main()
{
  uint ipos = gl_GlobalInvocationID.x;
  float err = 0.0, w = 0.0;
  if(ipos < push.size)
  {
    w = vin[2*ipos+1];
    err = w * vin[2*ipos];
  }
  w = subgroupAdd(w);
  err = subgroupAdd(err);
  if(gl_SubgroupInvocationID == 0)
  {
    if(w > 0.0) err /= w;
    else err = 0.0;
    shm_loss[gl_SubgroupID] = err;
    shm_w[gl_SubgroupID] = w/gl_SubgroupSize;
  }

  barrier();

  if(gl_SubgroupID == 0)
  {
    err = 0.0; w = 0.0;
    if(gl_SubgroupInvocationID < gl_NumSubgroups)
    {
      err = shm_loss[gl_SubgroupInvocationID];
      w = shm_w[gl_SubgroupInvocationID];
    }
    err = subgroupAdd(err);
    w = subgroupAdd(w);
    if(gl_SubgroupInvocationID == 0)
    {
      if(w > 0.0) err /= w;
      vout[2*gl_WorkGroupID.x  ] = err;
      vout[2*gl_WorkGroupID.x+1] = w/gl_WorkGroupSize.x;
    }
  }
}
