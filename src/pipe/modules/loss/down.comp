#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float bound_x, bound_y, bound_z;
  float loss;
} params;


layout( // input f16 buffer rgb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f16 buffer rgb
    set = 1, binding = 1
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  float mse = 0.0;
  const int sz = 2;
  float w = 0.0;
  for(int i=0;i<sz;i++) for(int j=0;j<sz;j++)
  {
    ivec2 rd = sz*opos + ivec2(i,j);
    if(any(greaterThanEqual(rd, textureSize(img_in, 0)))) continue;
    if(any(lessThan(rd, ivec2(0)))) continue;
    vec2 v = texelFetch(img_in, rd, 0).rg;
    w += v.y;
    mse += v.y * v.x;
    // mse = max(mse, v.x);
  }

  if(w == 0.0) mse = -1.0;
  else mse /= w;

  imageStore(img_out, opos, vec4(mse, w/(sz*sz), 0, 0));
}

