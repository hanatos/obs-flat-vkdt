#version 460
#extension GL_GOOGLE_include_directive       : enable
#extension GL_KHR_shader_subgroup_basic      : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float bound_x, bound_y, bound_z;
  float loss;
} params;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform sampler2D img_orig;
layout(set = 1, binding = 2, std430) buffer ssbo_t { float vout[]; };

const uint shm_size = gl_WorkGroupSize.x*gl_WorkGroupSize.y / 4; // really divide by gl_SubgroupSize;
shared float shm_loss[shm_size];
shared float shm_w[shm_size];

void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  float err = 0.0, w = 0.0;
  if(all(lessThan(ipos, textureSize(img_in, 0))))
  {
    vec3 v0 = texelFetch(img_in,   ipos, 0).rgb;
    vec3 v1 = texture(img_orig, (ipos+0.5)/vec2(textureSize(img_in, 0))).rgb; // allow dummy/constant input at different size
    vec3 v = v0 - v1;
    if(any(isnan(v)) || any(isinf(v)))
    {
      w = 0.0;
      err = 0.0;
    }
    else
    {
      w = 1.0;
      err = dot(v, v); // L2
    }
  }
  err = subgroupAdd(err);
  w   = subgroupAdd(w);
  if(gl_SubgroupInvocationID == 0)
  {
    if(w > 0.0) err /= w;
    else err = 0.0;
    shm_loss[gl_SubgroupID] = err;
    shm_w[gl_SubgroupID] = w/gl_SubgroupSize;
  }
  barrier();
  if(gl_SubgroupID == 0)
  {
    err = 0.0; w = 0.0;
    if(gl_SubgroupInvocationID < gl_NumSubgroups)
    {
      err = shm_loss[gl_SubgroupInvocationID];
      w = shm_w[gl_SubgroupInvocationID];
    }
    err = subgroupAdd(err);
    w = subgroupAdd(w);
    if(gl_SubgroupInvocationID == 0)
    {
      uint wid = gl_WorkGroupID.x + gl_NumWorkGroups.x * gl_WorkGroupID.y;
      if(w > 0.0) err /= w;
      vout[2*wid  ] = err;
      vout[2*wid+1] = w/(gl_WorkGroupSize.x * gl_WorkGroupSize.y);
    }
  }
}
