#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float radius;
  float epsilon;
  float gamma;
  int   num_zones;
  float zone0;
  float zone1;
  float zone2;
  float zone3;
  float zone4;
  float zone5;
  float zone6;
} params;


layout( // input f16 buffer rgb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input zones
    set = 1, binding = 1
) uniform sampler2D img_zone;

layout( // output f16 buffer rgb
    set = 1, binding = 2
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3  rgb  = texelFetch(img_in, ipos, 0).rgb;
  float zone = clamp(params.num_zones, 2, 7) * texture(img_zone, (ipos+0.5)/imageSize(img_out)).r;
  float i = floor(zone);
  float f = fract(zone);
  float ev = 0.0;
  if     (i < 1) ev = mix(params.zone0, params.zone1, smoothstep(0.0, 1.0, f));
  else if(i < 2) ev = mix(params.zone1, params.zone2, smoothstep(0.0, 1.0, f));
  else if(i < 3) ev = mix(params.zone2, params.zone3, smoothstep(0.0, 1.0, f));
  else if(i < 4) ev = mix(params.zone3, params.zone4, smoothstep(0.0, 1.0, f));
  else if(i < 5) ev = mix(params.zone4, params.zone5, smoothstep(0.0, 1.0, f));
  else if(i < 6) ev = mix(params.zone5, params.zone6, smoothstep(0.0, 1.0, f));
  else           ev = mix(params.zone6, params.zone6, smoothstep(0.0, 1.0, f));
  float l = luminance_rec2020(rgb);
  rgb = adjust_colour_dng(rgb, rgb * pow(2.0, ev));
  imageStore(img_out, ipos, vec4(rgb, 1));
}

