// this is the 'stupid' version of floating point atomics.
// it's backward and hurts and necessary mostly for amd devices.
#version 460
#extension GL_GOOGLE_include_directive             : enable
#extension GL_KHR_shader_subgroup_basic            : enable
#extension GL_KHR_shader_subgroup_ballot           : enable
#extension GL_KHR_shader_subgroup_arithmetic       : enable
#extension GL_KHR_shader_subgroup_shuffle          : enable
#extension GL_KHR_shader_subgroup_clustered        : enable
#extension GL_KHR_shader_subgroup_vote             : enable
#extension GL_KHR_shader_subgroup_shuffle_relative : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  uvec4 nspots;
  vec4 spot[24];
  float picked[72]; // actually 3-strided colours
} params;


layout( // input buffer
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output picked colour buffer
    set = 1, binding = 1, r32ui
) uniform uimage2D img_out;

void imgAtomicAdd(ivec2 tc, float a)
{
  bool done = false;
  int i = 0;
  while(!done)
  {
    uint val = imageLoad(img_out, tc).r;
    uint nvl = floatBitsToUint(uintBitsToFloat(val)+a);
    uint ovl = imageAtomicCompSwap(img_out, tc, val, nvl);
    done = (ovl == val);
    if(i++ > 10) break; // oh what the fuck
  }
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, textureSize(img_in, 0)))) return;
  uint seed = ipos.x*1337 + ipos.y * 123456789;

  for(int i=0;i<params.nspots.x;i++)
  {
    vec3 rgb = vec3(0);
    uvec4 aabb = uvec4(params.spot[i] * textureSize(img_in, 0).xxyy);

    float cnt = (aabb.y - aabb.x)*(aabb.w - aabb.z); // how many pixels in patch
    float scale = 1.0/min(100.0, float(cnt));

    // check whether we're inside the 2D AABB
    if(ipos.x >= aabb.x && ipos.x <= aabb.y &&
       ipos.y >= aabb.z && ipos.y <= aabb.w)
      rgb = texelFetch(img_in, ipos, 0).rgb * scale;

    subgroupBarrier();
    rgb = subgroupAdd(rgb);
    subgroupBarrier();

    float xi = mrand(seed);
    // intel/older hardware will just lose the device if we work too much.
    // so subsample the patch randomly to just use 100 samples:
    if(xi < min(100.0, float(cnt)) / float(cnt))
    {
      if(gl_SubgroupInvocationID == 0 && !all(equal(vec3(0), rgb)))
      { // only one thread needs to do the atomics
        imgAtomicAdd(ivec2(i, 0), rgb.r);
        imgAtomicAdd(ivec2(i, 1), rgb.g);
        imgAtomicAdd(ivec2(i, 2), rgb.b);
      }
    }
  }
}

