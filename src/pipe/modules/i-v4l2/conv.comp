#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

//layout(std140, set = 0, binding = 1) uniform params_t
// { } params;

layout(push_constant, std140) uniform push_t
{
  uint format;
} push;

layout( // input buffer rg ui8
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f16 buffer rgba
    set = 1, binding = 1
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb;
  if(push.format == 0)
  { // decode YUYV: two bytes per pixel for every other pixel it means u or v
    vec4 tex = texelFetch(img_in, ivec2(ipos.x/2, ipos.y), 0).rgba;
    float Y = ((ipos.x & 1) != 0) ? tex.b : tex.r;
    float u = tex.g;
    float v = tex.a;
    // BT.601 (HDTV)
    rgb = vec3(
        298.082 * Y               + 408.583 * v - 222.921,
        298.082 * Y - 100.291 * u - 208.120 * v + 135.576,
        298.082 * Y + 516.412 * u               - 276.836)/256.0;
  }
  else if(push.format == 1)
  { // yuv YU12
    float Y = texelFetch(img_in, ipos, 0).r;
    ivec2 rd = ipos/2;
    // TODO: interpolate these uvs linearly at least, looks very blocky like this:
    float u = texelFetch(img_in, ivec2(rd.x + ((rd.y & 1) == 0 ? 0 : imageSize(img_out).x/2), rd.y/2 +   imageSize(img_out).y),   0).r;
    float v = texelFetch(img_in, ivec2(rd.x + ((rd.y & 1) == 0 ? 0 : imageSize(img_out).x/2), rd.y/2 + 5*imageSize(img_out).y/4), 0).r;
    // BT.601 (HDTV)
    rgb = vec3(
        298.082 * Y               + 408.583 * v - 222.921,
        298.082 * Y - 100.291 * u - 208.120 * v + 135.576,
        298.082 * Y + 516.412 * u               - 276.836)/256.0;
  }
  else if(push.format == 2)
  { // yuv NV12
    rgb = textureLod(img_in, (ipos+0.5)/vec2(imageSize(img_out)), 0).rgb;
  }
  // undo srgb tone curve
  // rgb.r = rgb.r <= 0.04045 ? rgb.r/12.92 : pow((rgb.r+0.055)/(1+0.055), 2.4);
  // rgb.g = rgb.g <= 0.04045 ? rgb.g/12.92 : pow((rgb.g+0.055)/(1+0.055), 2.4);
  // rgb.b = rgb.b <= 0.04045 ? rgb.b/12.92 : pow((rgb.b+0.055)/(1+0.055), 2.4);
  // undo tone curve that we'd be applying in the end for srgb (straight gamma 2.2)
  rgb = pow(clamp(rgb, 0, 1), vec3(2.2));
  mat3 rec709_to_rec2020 = mat3(
      0.62750375, 0.32927542, 0.04330267,
      0.06910828, 0.91951917, 0.0113596 ,
      0.01639406, 0.08801128, 0.89538036);
  rgb *= rec709_to_rec2020;
  imageStore(img_out, ipos, vec4(rgb, 1));
}

