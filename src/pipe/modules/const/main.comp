#version 460
#extension GL_GOOGLE_include_directive    : enable
#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(std140, set = 0, binding = 1) uniform params_t
{
  uvec4 nspots;
  vec4 colour[24];
  uint mode;
} params;
layout(set = 1, binding = 0) uniform writeonly image2D img_out;

void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;
  if(params.mode == 0)
  { // constant colour fill mode
    vec3 rgb = params.colour[0].rgb;
    imageStore(img_out, ipos, vec4(rgb, 1));
  }
  else if(params.mode == 1)
  { // replicate colour picker layout. actually in format r, atom, probably.
    if(ipos.x > params.nspots.x) return;
    if(ipos.y > 2) return;
    vec3 rgb = vec3(0.0);
    if(ipos.y == 0) rgb = vec3(params.colour[ipos.x].x);
    if(ipos.y == 1) rgb = vec3(params.colour[ipos.x].y);
    if(ipos.y == 2) rgb = vec3(params.colour[ipos.x].z);
    imageStore(img_out, ipos, vec4(rgb, 1));
  }
}
