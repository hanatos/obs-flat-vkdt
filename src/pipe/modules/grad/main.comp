#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  vec4 colour;  // rgb
  float stops;  // density in stops
  float dist;
  float width;
  float rotate;
} params;


layout( // input
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output
    set = 1, binding = 1
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;

  vec2 p = ipos / vec2(imageSize(img_out)) - vec2(0.5);

  float r = radians(params.rotate);
  vec2 n = vec2(sin(r), -cos(r));
  float d = dot(n, p) - params.dist;
  float w = 1.5707963267948966 + atan(d/params.width) / 1.5707963267948966;

  // beer transmittance
  vec3 t = exp(-max(vec3(1e-8), .6931471805*(1.0 - params.colour.rgb) * params.stops * w));

  rgb *= t;

  imageStore(img_out, ipos, vec4(rgb, 1));
}

