#version 460
#extension GL_GOOGLE_include_directive    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float thrs;
  int mode;   // 0 off 1 gamut 2 exposure 3 both
  int gamut;  // 0 off 1 spectral locus 2 rec2020 3 rec709
} params;


layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;

  vec3 rgbc = rgb;
  if(params.gamut == 3)
  { // if rec709 mode: convert via matrix
    const mat3 M = mat3(
         1.66022677, -0.12455334, -0.01815514,
        -0.58754761,  1.13292605, -0.10060303,
        -0.07283825, -0.00834963,  1.11899817);
    rgb = M * rgb;
  }

  if((params.mode & 1) > 0 && (params.gamut == 2 || params.gamut == 3))
  { // check rec2020/rec709 gamut boundaries:
    if(any(lessThan(rgbc, vec3(params.thrs))))
      rgb = ((ipos.x / 10 + ipos.y / 10) & 1) == 0 ? vec3(1, 0, 1) : vec3(1, 1, 1);
  }

  if((params.mode & 2) > 0)
  {
    if(all(lessThan(rgb, vec3(params.thrs))))
      rgb = ((ipos.x / 10 + ipos.y / 10) & 1) == 0 ? vec3(1, 1, 0) : vec3(0, 0, 0);
    else if(all(greaterThan(rgb, vec3(1.0-params.thrs))))
      rgb = ((ipos.x / 10 + ipos.y / 10) & 1) == 0 ? vec3(0, 1, 1) : vec3(1, 1, 1);
  }

  imageStore(img_out, ipos, vec4(rgb, 1));
}

