#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  int nspots;
  int pad0, pad1, pad2;
  vec4 ref[18];
} params;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1, r32ui) uniform uimage2D img_out;

// histogram counter. this runs on the input dimensions
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, textureSize(img_in, 0)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;
  const mat3 rec2020_to_xyz = mat3(
    6.36958048e-01, 2.62700212e-01, 4.20575872e-11,
    1.44616904e-01, 6.77998072e-01, 2.80726931e-02,
    1.68880975e-01, 5.93017165e-02, 1.06098506e+00);
  vec3 xyz = rec2020_to_xyz * rgb;
  float b = dot(vec3(1.0), xyz);
  if(b < 0.05) return; // overly dark pixels give us unreliable colour estimates, mostly clamped to some boundary
  vec2 xy = xyz.xy / b;
  xy.y = 1.0 - xy.y;

  vec2 scale = imageSize(img_out).xy;// * vec2(0.75, 0.85);
  ivec2 opos = clamp(ivec2(scale * xy), ivec2(0), imageSize(img_out).xy-1);
  imageAtomicAdd(img_out, opos, 1);
}
