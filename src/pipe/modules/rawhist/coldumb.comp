#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_shader_atomic_float     : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float c;
  float dx;
  uint filters;
  uint black;
  uint white;
} params;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1, r32ui) uniform uimage2D img_out;

void imgAtomicAdd(ivec2 tc, float a)
{ // for amd. ouch, this is going to be slow
  bool done = false;
  while(!done)
  {
    uint val = imageLoad(img_out, tc).r;
    uint nvl = floatBitsToUint(uintBitsToFloat(val)+a);
    uint ovl = imageAtomicCompSwap(img_out, tc, val, nvl);
    done = (ovl == val);
  }
}

// histogram counter. this runs on the input dimensions/block size
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  float mean = 0.0, mom2 = 0.0, x = 0.0;
  if(params.filters == 9)
  { // x-trans
    ipos *= 3;
    if(any(greaterThanEqual(ipos, textureSize(img_in, 0)))) return;
    // look at cross of green channels
    float val0 = 65536.0*texelFetch(img_in, ipos+ivec2(0,0), 0).r;
    float val1 = 65536.0*texelFetch(img_in, ipos+ivec2(2,0), 0).r;
    float val2 = 65536.0*texelFetch(img_in, ipos+ivec2(1,1), 0).r;
    float val3 = 65536.0*texelFetch(img_in, ipos+ivec2(0,2), 0).r;
    float val4 = 65536.0*texelFetch(img_in, ipos+ivec2(2,2), 0).r;
    mean = (val0 + val1 + val2 + val3 + val4)/5.0;
    mom2 = (val0*val0 + val1*val1 + val2*val2 + val3*val3 + val4*val4)/5.0;
#if 1 // log space
    float white = log2(params.white)/16.0f;
    float black = log2(params.black)/16.0f;
    x = imageSize(img_out).x * ((log2(mean)/16.0f - black) / (white - black));
#else // linear
    float white = params.white;
    x = imageSize(img_out).x * (mean - params.black) / (white - params.black);
#endif
  }
  else if(params.filters != 0)
  { // bayer
    ipos *= 2;
    if(any(greaterThanEqual(ipos, textureSize(img_in, 0)))) return;
    // look at cross of green channels
    float val0 = 65536.0*texelFetch(img_in, ipos+ivec2(1,0), 0).r;
    float val1 = 65536.0*texelFetch(img_in, ipos+ivec2(0,1), 0).r;
    mean = (val0 + val1)/2.0;
    mom2 = (val0*val0 + val1*val1)/2.0;
#if 1 // log space
    float white = log2(params.white)/16.0f;
    float black = log2(params.black)/16.0f;
    x = imageSize(img_out).x * ((log2(mean)/16.0f - black) / (white - black));
#else // linear
    float white = params.white;
    x = imageSize(img_out).x * (mean - params.black) / (white - params.black);
#endif
  }

  imgAtomicAdd(ivec2(x, 0), 1.0);
  imgAtomicAdd(ivec2(x, 1), mean);
  imgAtomicAdd(ivec2(x, 2), mom2);
}

