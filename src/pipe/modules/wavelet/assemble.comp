#version 460
#extension GL_GOOGLE_include_directive    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float s0;
  float s1;
  float s2;
  float s3;
  float s4;
} params;

// layout(push_constant, std140) uniform push_t
// { } push;

// 5 input scales
layout( set = 1, binding = 0) uniform sampler2D img_s0; // original image
layout( set = 1, binding = 1) uniform sampler2D img_s1; // one downsampling step
layout( set = 1, binding = 2) uniform sampler2D img_s2; // ..
layout( set = 1, binding = 3) uniform sampler2D img_s3;
layout( set = 1, binding = 4) uniform sampler2D img_s4; // four downsampling steps
layout( set = 1, binding = 5) uniform sampler2D img_mask;

layout( // output
    set = 1, binding = 6
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  // go through all levels same as downsampling would, swizzling coordinates
  // on the go as done in down.comp. then pick up the scales accordingly.
  ivec2 esi = ipos;
  ivec2 sz = textureSize(img_s1, 0).xy;

  float mask = texelFetch(img_mask, esi, 0).r;
  vec3 down0 = texelFetch(img_s0, esi, 0).rgb;
  esi = mix(esi/2, sz-1-esi/2, equal(esi & 1, ivec2(0)));
  vec3 down1 = texelFetch(img_s1, esi, 0).rgb;
  esi = mix(esi/2, sz-1-esi/2, equal(esi & 1, ivec2(0)));
  vec3 down2 = texelFetch(img_s2, esi, 0).rgb;
  esi = mix(esi/2, sz-1-esi/2, equal(esi & 1, ivec2(0)));
  vec3 down3 = texelFetch(img_s3, esi, 0).rgb;
  esi = mix(esi/2, sz-1-esi/2, equal(esi & 1, ivec2(0)));
  vec3 down4 = texelFetch(img_s4, esi, 0).rgb;

  const float sigma = 1.0;
  const float b0 = 1.0;
  const float b1 = 0.5;
  const float b2 = 0.25;
  const float b3 = 0.125;
  down0 = (down0 - down1)/(sigma*b0);
  down1 = (down1 - down2)/(sigma*b1);
  down2 = (down2 - down3)/(sigma*b2);
  down3 = (down3 - down4)/(sigma*b3);

  // adjust brightness in coarsest level
  down4 *= exp2(mask * params.s4);

  vec3 tt = vec3(0.0);
  float ht = 2.0, thrs;
  thrs = mask * params.s0;
  tt = min(vec3(1.0), abs(down3)/(2*thrs));
  down4 += sigma * b3 * sign(down3) * mix(max(abs(down3) - thrs, vec3(0.0)), abs(down3), tt);
  thrs = mask * params.s1;
  tt = min(vec3(1.0), abs(down2)/(2*thrs));
  down4 += sigma * b2 * sign(down2) * mix(max(abs(down2) - thrs, vec3(0.0)), abs(down2), tt);
  thrs = mask * params.s2;
  tt = min(vec3(1.0), abs(down1)/(2*thrs));
  down4 += sigma * b1 * sign(down1) * mix(max(abs(down1) - thrs, vec3(0.0)), abs(down1), tt);
  thrs = mask * params.s3;
  tt = min(vec3(1.0), abs(down0)/(2*thrs));
  down4 += sigma * b0 * sign(down0) * mix(max(abs(down0) - thrs, vec3(0.0)), abs(down0), tt);

  imageStore(img_out, ipos, vec4(down4, 1));
}

