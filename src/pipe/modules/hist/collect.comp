#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

// layout(std140, set = 0, binding = 1) uniform params_t { } params;

layout( // input f16 buffer rgb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output ui32 buffer rgb
    set = 1, binding = 1, r32ui
) uniform uimage2D img_out;

// histogram counter. this runs on the input dimensions
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, textureSize(img_in, 0)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;
  float scale = float(imageSize(img_out).x)/float(textureSize(img_in, 0).x);
  int opos = clamp(int(scale * ipos.x), 0, int(imageSize(img_out).x)-1);
  uvec3 y = clamp(uvec3((1.0-rgb) * imageSize(img_out).y + 0.5), 0, imageSize(img_out).y-1);
  // use 10-bit rgb
  imageAtomicAdd(img_out, ivec2(opos, y.r), 1);
  imageAtomicAdd(img_out, ivec2(opos, y.g), 1024);
  imageAtomicAdd(img_out, ivec2(opos, y.b), 1048576);
}

