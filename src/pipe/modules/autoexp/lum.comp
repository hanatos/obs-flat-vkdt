// LDAP's merian exposure module code stolen:
#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "shared.glsl"
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(std140, set = 0, binding = 0) uniform global_t
{
  uint frame;
} global;
layout(std140, set = 0, binding = 1) uniform params_t
{
  float vup;
  float vdown;
  float timediff;
  int   reset;
} params;
layout(set = 1, binding = 0) uniform sampler2D img_src;
layout(set = 1, binding = 1, std430) buffer buf_hist { uint  histogram[]; };
layout(set = 1, binding = 2, std430) buffer buf_lum  { float luminance[]; };

const uint hist_size = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
shared uint[hist_size] local_hist;
shared uint count;
const float min_log_histogram = -15.0;
const float max_log_histogram =  20.0;

void main()
{
  float max_luminance;
  const uint local_bin = histogram[gl_LocalInvocationIndex];
  local_hist[gl_LocalInvocationIndex] = local_bin * gl_LocalInvocationIndex;
  if (gl_LocalInvocationIndex == 0) count = histogram[hist_size];
  barrier();

  for (uint split = (hist_size >> 1); split > 0; split >>= 1)
  {
    if (uint(gl_LocalInvocationIndex) < split)
      local_hist[gl_LocalInvocationIndex] += local_hist[gl_LocalInvocationIndex + split];
    barrier();
  }

  if (gl_LocalInvocationIndex == 0)
  {
    const float num_bright_pixels = max(count - float(local_bin), 1.0);
    const float average_bin = (local_hist[0] / num_bright_pixels) - 1.0;
    const float average_l = exp2(((average_bin / float(hist_size - 2.)) * max_log_histogram) + min_log_histogram);
    max_luminance = average_l;

    float last_max_luminance = (params.reset == 1 || global.frame == 0) ? max_luminance : luminance[0];
    if (isnan(last_max_luminance) || isinf(last_max_luminance)) last_max_luminance = max_luminance;

    const float tau = -params.timediff * (max_luminance > last_max_luminance ? params.vup: params.vdown);
    max_luminance = last_max_luminance + (max_luminance - last_max_luminance) * (1 - exp(tau));
    luminance[0] = max_luminance;
  }
}
