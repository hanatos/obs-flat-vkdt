#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

// layout(std140, set = 0, binding = 1) uniform params_t
// { } params;

layout(push_constant, std140) uniform push_t
{
  uint scale;
} push;

layout( // input colour buffer
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input full res mask, only used at scale == 0
    set = 1, binding = 1
) uniform sampler2D img_mask;

layout(
    set = 1, binding = 2
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  // blur, store only coarse res
  const float w[5] = {1.0f/16.0f, 4.0f/16.0f, 6.0f/16.0f, 4.0f/16.0f, 1.0f/16.0f};
  vec3 col = vec3(0.0);
  float wgt = 0.0;
  for(int jj=-2;jj<=2;jj++) for(int ii=-2;ii<=2;ii++)
  {
    vec4 rgbm = texture(img_in, (2*opos+ivec2(ii,jj)+0.5)/textureSize(img_in, 0));
    if(push.scale == 0) rgbm.w = texture(img_mask, (2*opos+ivec2(ii,jj)+0.5)/textureSize(img_mask, 0)).r;
    float u = w[ii+2]*w[jj+2];
    // u *= clamp(1.0-rgbm.z, 0.0, 1.0); // if mask is 1.0 pixels count as invalid
    if(rgbm.w < 0.5)
    {
      col += rgbm.rgb * u;
      wgt += u;
    }
  }
  float mask = 0.0;
  if(wgt > 0.0) col /= wgt;
  else mask = 1.0;
  imageStore(img_out, opos, vec4(col, mask));
}
