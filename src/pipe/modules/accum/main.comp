#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{
  uint frame;
} global;

layout(std140, set = 0, binding = 1) uniform params_t
{
  int start;
} params;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 2) uniform sampler2D img_back;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb = texelFetch(img_in,   ipos, 0).rgb;
  vec3 bck = texelFetch(img_back, ipos, 0).rgb;
  rgb = mix(rgb, bck, isnan(rgb)); // remove nan on input
  if(int(global.frame) >= params.start)
  {
    float N = int(global.frame) - params.start;
    rgb = mix(rgb, bck, N/(N+1.0));
  }
  imageStore(img_out, ipos, vec4(rgb, 1));
}

