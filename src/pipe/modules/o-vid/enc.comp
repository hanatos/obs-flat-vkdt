#version 460
#extension GL_GOOGLE_include_directive       : enable
#extension GL_KHR_shader_subgroup_basic      : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_clustered  : enable
#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(push_constant, std140) uniform push_t
{ // this is the same as we have in `i-vid`
  int bits;     // 8, 10, 12, 16
  int chr;      // 420, 422, 444
  int range;    // 16-235/240, 0-255
} push;
layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_Y;
layout(set = 1, binding = 2) uniform writeonly image2D img_Cb;
layout(set = 1, binding = 3) uniform writeonly image2D img_Cr;

void main()
{
  uint idx = (gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x) * gl_WorkGroupSize.x*gl_WorkGroupSize.y
    + gl_SubgroupID * gl_SubgroupSize + gl_SubgroupInvocationID;
  idx /= 4;
  ivec2 ipos = 2*ivec2(idx % (imageSize(img_Y).x/2), idx / (imageSize(img_Y).x/2));
  // subgroup blocks are 2x2 blocks in the image:
  ipos.y += int((gl_SubgroupInvocationID & 2)>>1);
  ipos.x += int(gl_SubgroupInvocationID & 1);
  if(any(greaterThanEqual(ipos, imageSize(img_Y)))) return;
  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;

  // TODO: if color 0 or 1 apply different YCbCr matrix (??)
  // M3 in ITU-R BT.2087-0 goes from rec2020 to YCbCr (both normalised)
  mat3 M3 = mat3(
      0.2627, -0.2627/1.8814,  0.5,
      0.6780, -0.6780/1.8814, -0.6780/1.4746,
      0.0593,  0.5,           -0.0593/1.4746);
  vec3 YCbCr = M3 * rgb;

  // TODO: if full range: quantise to number of bits, rescale to max within data type (>8 is 16 bits)
  // push.bits == 0 // 8-bit full range
  // YCbCr = YCbCr + vec3(0.0, 128.0/255.0, 128.0/255.0);

  if(push.range == 0)
  {
    if(push.bits == 0) // h264 8 bit limited range
      YCbCr = clamp(YCbCr * vec3(219.0, 224.0, 224.0)   + vec3(16.0, 128.0, 128.0),   vec3(0.0), vec3(255.0))/255.0;
    if(push.bits == 1) // prores 10 bit limited range
      YCbCr = clamp(YCbCr * vec3(219.0, 224.0, 224.0)*4 + vec3(16.0, 128.0, 128.0)*4, vec3(0.0), vec3(1023.0))/65535.0;
  }

  if(push.chr == 1) // 422, only subsample chroma in x
    YCbCr.yz = subgroupClusteredAdd(YCbCr.yz, 2)/2.0;
  if(push.chr == 0) // 420 subsample in both x and y
    YCbCr.yz = subgroupClusteredAdd(YCbCr.yz, 4)/4.0;

  // ffmpeg expects 10 bit stuff padded up to 16 but in the least significant
  // bits. so we need to divide our 1.0 normalised floating point values a bit.
  // should probably evaluate how we can write ui16 directly (put in ssbo and
  // upload that instead of image, though i don't expect 10 bit quantisation
  // problems for float in that range)

  ivec2 cpos = ipos;
  if(push.chr == 1) cpos.x  /= 2;
  if(push.chr == 0) cpos.xy /= 2;

  imageStore(img_Y, ipos, vec4(YCbCr.x));
  if(push.chr == 2 ||                                           // 444
    (push.chr == 1 && ((gl_SubgroupInvocationID & 1) == 0)) ||  // 422
    (push.chr == 0 && ((gl_SubgroupInvocationID & 3) == 0)))    // 420
  { // if subgroup leader of a chroma block 2x2 or 2x1
    // YCbCr.yz = vec2(ipos)/vec2(imageSize(img_Y))/64.0;
    imageStore(img_Cb, cpos, vec4(YCbCr.y));
    imageStore(img_Cr, cpos, vec4(YCbCr.z));
  }
}
