#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#extension GL_EXT_control_flow_attributes : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

// layout(std140, set = 0, binding = 1) uniform params_t
// { } params;

// layout(push_constant, std140) uniform push_t
// { } push;

layout(
    set = 1, binding = 0
) uniform sampler2D img_in;

layout(
    set = 1, binding = 1
) uniform sampler2D weights;

layout(
    set = 1, binding = 2
) uniform writeonly image2D img_out[];

// performs a 5x5 "blur" convolution given the weights in the according texture.
// input and output channels are 3
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out[0])))) return;

  vec3 rgb = texelFetch(weights, ivec2(75, 0), 0).rgb;
  vec3 orig;
  [[unroll]] for(int j=-2;j<=2;j++)
  {
    [[unroll]] for(int i=-2;i<=2;i++)
    {
    vec3 tex = texture(img_in, (ipos+0.5-vec2(i,j))/vec2(textureSize(img_in, 0))).rgb * 256.0;
    if(j==0 && i==0) orig = tex;
    int tc = 5*(j+2)+i+2;
    vec3 c0 = texelFetch(weights, ivec2(tc+ 0, 0), 0).rgb;
    vec3 c1 = texelFetch(weights, ivec2(tc+25, 0), 0).rgb;
    vec3 c2 = texelFetch(weights, ivec2(tc+50, 0), 0).rgb;
    mat3 M = mat3(c0, c1, c2);
    rgb += M * tex;
  }}

  // output two images in array: original + blurred appended.
  // note that we put the blurred first, so we can read it in one piece
  // in the sum node at the end. i think we're wasting the two extra channels
  // anyways so we might as well put each one in their texture *shrugs*
  imageStore(img_out[0], ipos, vec4(rgb, orig.r));
  imageStore(img_out[1], ipos, vec4(orig.gb, vec2(0.0)));
}
