#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float white;
} params;

layout(push_constant, std140) uniform push_t
{
  vec4 wb;
  uint filters;
} push;

layout( // input uint16 buffer rggb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input f16 buffer rgb
    set = 1, binding = 1
) uniform sampler2D img_coarse;

layout( // output f16 buffer rggb
    set = 1, binding = 2
) uniform writeonly image2D img_out;

// upsample back to mosaic. this is either 3x3 or 2x2, depending on filters.
// runs on coarse resolution.
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 upsm = texelFetch(img_coarse, ipos, 0).rgb;
  const float white = params.white;

  if(push.filters == 9)
  {
    // swap red and blue channels according to sensor layout
    if(((ipos.x + ipos.y) & 1) == 0)
      upsm.rgb = upsm.bgr;
    // get original input texels
    float c0 = texelFetch(img_in, 3*ipos, 0).r;
    float c1 = texelFetch(img_in, 3*ipos+ivec2(0,1), 0).r;
    float c2 = texelFetch(img_in, 3*ipos+ivec2(0,2), 0).r;
    float c3 = texelFetch(img_in, 3*ipos+ivec2(1,0), 0).r;
    float c4 = texelFetch(img_in, 3*ipos+ivec2(1,1), 0).r;
    float c5 = texelFetch(img_in, 3*ipos+ivec2(1,2), 0).r;
    float c6 = texelFetch(img_in, 3*ipos+ivec2(2,0), 0).r;
    float c7 = texelFetch(img_in, 3*ipos+ivec2(2,1), 0).r;
    float c8 = texelFetch(img_in, 3*ipos+ivec2(2,2), 0).r;
    float minr = min(c1, c7);
    float minb = min(c3, c5);
    float ming = min(min(min(c0, c2), c4), min(c6, c8));

    // determine by blurry image, without wb:
    float sr = minr/max(0.001, upsm.r);
    float sg = ming/max(0.001, upsm.g);
    float sb = minb/max(0.001, upsm.b);
    float wr = exp(upsm.r - max(upsm.g, upsm.b));
    float wg = exp(upsm.g - max(upsm.r, upsm.b));
    float wb = exp(upsm.b - max(upsm.r, upsm.g));
    float scale = (sr * wr + sg * wg + sb * wb) / (wr + wg + wb);

    float maxr = max(c1, c7);
    float maxb = max(c3, c5);
    float maxg = max(max(max(c0, c2), c4), max(c6, c8));
    const float softw = 0.97*white;
    const float maxrgb = max(maxr, max(maxg, maxb));
    if(maxrgb > softw)
    {
      float mg = (ming+maxg)*.5;
      float t = smoothstep(softw, white, maxrgb);
      c1 = mix(c1, upsm.r * scale, t);
      c7 = mix(c7, upsm.r * scale, t);
      c3 = mix(c3, upsm.b * scale, t);
      c5 = mix(c5, upsm.b * scale, t);

      t = smoothstep(softw, white, ming);
      c0 = mix(c0, upsm.g * scale, t);
      t = smoothstep(softw, white, ming);
      c2 = mix(c2, upsm.g * scale, t);
      t = smoothstep(softw, white, ming);
      c4 = mix(c4, upsm.g * scale, t);
      t = smoothstep(softw, white, ming);
      c6 = mix(c6, upsm.g * scale, t);
      t = smoothstep(softw, white, ming);
      c8 = mix(c8, upsm.g * scale, t);
    }

    imageStore(img_out, 3*ipos,            vec4(vec3(c0), 1));
    imageStore(img_out, 3*ipos+ivec2(0,1), vec4(vec3(c1), 1));
    imageStore(img_out, 3*ipos+ivec2(0,2), vec4(vec3(c2), 1));
    imageStore(img_out, 3*ipos+ivec2(1,0), vec4(vec3(c3), 1));
    imageStore(img_out, 3*ipos+ivec2(1,1), vec4(vec3(c4), 1));
    imageStore(img_out, 3*ipos+ivec2(1,2), vec4(vec3(c5), 1));
    imageStore(img_out, 3*ipos+ivec2(2,0), vec4(vec3(c6), 1));
    imageStore(img_out, 3*ipos+ivec2(2,1), vec4(vec3(c7), 1));
    imageStore(img_out, 3*ipos+ivec2(2,2), vec4(vec3(c8), 1));
  }
  else
  {
    // reads : w z -> r g
    //         x y    g b
    vec4 c = textureGather(img_in, 2*(ipos+.5)/vec2(textureSize(img_in, 0)), 0);
    float ming = min(c.x, c.z);

    // find by blurry image
    float sr = c.w /max(0.001, upsm.r);
    float sg = ming/max(0.001, upsm.g);
    float sb = c.y /max(0.001, upsm.b);
    float wr = exp(upsm.r - max(upsm.g, upsm.b));
    float wg = exp(upsm.g - max(upsm.r, upsm.b));
    float wb = exp(upsm.b - max(upsm.r, upsm.g));
    float scale = (sr * wr + sg * wg + sb * wb) / (wr + wg + wb);

    const float softw = 0.97*white;
    float maxrgb = max(max(c.x, c.y), max(c.z, c.w));
    if(maxrgb > softw)
    {
      const float t = smoothstep(softw, white, maxrgb);
      c = mix(c, scale * upsm.gbgr, t);
    }
    imageStore(img_out, 2*ipos,            vec4(c.w));
    imageStore(img_out, 2*ipos+ivec2(1,0), vec4(c.z));
    imageStore(img_out, 2*ipos+ivec2(0,1), vec4(c.x));
    imageStore(img_out, 2*ipos+ivec2(1,1), vec4(c.y));
  }
}
