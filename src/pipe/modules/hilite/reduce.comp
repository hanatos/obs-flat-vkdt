#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float white;
  float desat;
  float soft;
} params;

layout(push_constant, std140) uniform push_t
{
  vec4 wb;
  uint filters;
} push;

layout( // input buffer y
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output buffer y blurred/downsized
    set = 1, binding = 1
) uniform writeonly image2D img_out;

// gauss reduce, run on dimensions of reduced output buffer
void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  float white = params.white;
  if(!(white > 0.0)) white = 1.0;
  // blur, store only coarse res
  const float w[5] = {1.0/16.0, 4.0/16.0, 6.0/16.0, 4.0/16.0, 1.0/16.0};
  const float sw[5] = {1.0, 2.0, 0.0, -2.0, -1.0};
  vec2 edge = vec2(0.0);
  vec3 col = vec3(0.0);
  vec3 wb = push.wb.rgb;
  if(!(dot(wb,wb) > 1e-3)) wb = vec3(1);
  // vec3 center;
  float wgt = 0.0;
  for(int jj=-2;jj<=2;jj++) for(int ii=-2;ii<=2;ii++)
  {
    vec3 rgb = texture(img_in, vec2(2.0*opos+ivec2(ii,jj)+0.5)/textureSize(img_in, 0)).rgb;
    edge += vec2(w[jj+2]*sw[ii+2], w[ii+2]*sw[jj+2]) * luminance_rec2020(rgb);
    // if(jj==0 && ii==0) center = rgb;
    float u = w[ii+2]*w[jj+2];
    vec3 rgbw = rgb.rgb * wb.rgb;
    float cmax = max(rgbw.r, max(rgbw.g, rgbw.b));
    float cmin = min(rgbw.r, min(rgbw.g, rgbw.b));
    float sat = (cmax-cmin)/max(1e-3,cmax);
    if(all(lessThan(rgb, vec3(white))))
    { // desaturate colours, if close to white (s)
      float s = smoothstep(0.2, 1.0, max(rgb.r, max(rgb.g, rgb.b))/white);
      float t = smoothstep(0.15, 0.9, sat); // and desaturate more saturated colours more
      float ds = params.desat * params.desat;
      t = clamp(5.0*ds*ds*s*t, 0.0, 1.0);
      rgb = mix(rgb, vec3(cmax+cmin)/wb.rgb*.5, t);
      col += rgb * u;
      wgt += u;
    }
  }
  if(wgt == 0.0) col = vec3(1.0);//center; // propagate clipped value!
  else col /= wgt;
  imageStore(img_out, opos, vec4(col, length(edge)));
}
