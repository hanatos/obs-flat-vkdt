#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"
#include "cov.glsl"
// #include "squad.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float strength;
  float luma;
} params;

layout(push_constant, std140) uniform push_t
{
  vec4 wb;
  vec4 black;
  vec4 white;
  ivec4 crop;
  float noise_a;
  float noise_b;
  int   level;
  uint  block;
} push;

layout( // input
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output
    set = 1, binding = 1
) uniform writeonly image2D img_out;

layout( // covariance matrices
    set = 1, binding = 2
) uniform writeonly image2D img_cov;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec4 cov;
  vec3 rgb = response(img_in, ipos + push.crop.xy, cov, 0);
  imageStore(img_cov, ipos + push.crop.xy, cov);

  // sort image to write positions so we can iterate the filter
  ivec2 off = ivec2(ipos.x & 1, ipos.y & 1) * (imageSize(img_out)+ivec2(1))/2;
  ipos = ipos / 2 + off;

  // float edge = clamp(0.03+pow(100.0*max(0.0,min(cov.x, cov.y)-0.09), 2.0), 0.0, 1.0);
  // float edge = clamp(pow(100.0*max(0.0,min(cov.x, cov.y)-0.09), 2.0), 0.0, 1.0);
  float edge = clamp(75.0*max(0.0, cov.y-0.09), 0.0, 1.0);
  edge = smoothstep(0.4, 0.75, edge);
  edge = clamp(0.02+edge, 0.0, 1.0);
  // edge = smoothstep(0.4, 0.8, edge);
  // TODO: consider 2px padding radius for next iteration and mirror repeat!
  imageStore(img_out, ipos, vec4(rgb, edge));
}

