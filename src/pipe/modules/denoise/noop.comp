#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(std140, set = 0, binding = 1) uniform params_t
{
  float strength;
  float luma;
  float detail;
  int   gainmap;
} params;

layout(push_constant, std140) uniform push_t
{
  ivec4 crop;
  vec4 black;
  vec4 white;
  vec4 map_os;
  int  filters;
  int  gainmap;
} push;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;
layout(set = 1, binding = 2) uniform sampler2D img_gainmap;

// this is a dummy: it doesn't in fact denoise, but it crops away
// the noise estimation areas and scales to black/white.
// doesn't even care about different black/white for different colours.
// works on bayer or xtrans mosaic data, runs on full output dimensions (not blocks)
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  // written to work on bayer or rgb, assuming that black and white are monochrome for bayer images.
  vec3 col = texelFetch(img_in, ipos+push.crop.xy, 0).rgb;
  col = max(vec3(0), (col - push.black.rgb)/(push.white.rgb - push.black.rgb));
  if(push.filters != 0 && push.filters != 9 &&
     push.gainmap == 1 && params.gainmap == 1)
  { // bayer gainmap
    vec2 pos = (0.5 + ipos + push.crop.xy) / textureSize(img_in, 0);
    // in files i've seen, this mapping is the identity anyways:
    pos = clamp((pos * push.map_os.zw) - push.map_os.xy, vec2(0.), vec2(1.));
    vec4 gains = texture(img_gainmap, pos);
    float gain = gains[(ipos.x & 1) + (ipos.y & 1) * 2]; // CFA does not depend on crop, is normalised to block sizes/rggb during upload
    col *= gain;
    // col = vec3(gain);
  } // end gainmap
  imageStore(img_out, ipos, vec4(col, 1));
}

