#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(push_constant, std140) uniform push_t
{
  uint crop_x, crop_y;
  uint crop_X, crop_Y;
  vec4 black;
  vec4 white;
} push;

layout(
    set = 1, binding = 0
) uniform sampler2D img_in;

layout(
    set = 1, binding = 1
) uniform writeonly image2D img_out;

// this is a dummy: it doesn't in fact denoise, but it crops away
// the noise estimation areas and scales to black/white.
// doesn't even care about different black/white for different colours.
// works on bayer or xtrans mosaic data, runs on full output dimensions (not blocks)
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  // written to work on bayer or rgb, assuming that black and white are monochrome for bayer images.
  vec3 col = texelFetch(img_in, ipos+ivec2(push.crop_x, push.crop_y), 0).rgb;
  col = max(vec3(0), (col - push.black.rgb)/(push.white.rgb - push.black.rgb));
  imageStore(img_out, ipos, vec4(col, 1));
}

