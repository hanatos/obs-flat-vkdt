#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "shared.glsl"
#include "shared/render3d.glsl"
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout(std140, set = 0, binding = 0) uniform global_t
{
  int frame;
  int frame_cnt;
}
global;
// layout(std140, set = 0, binding = 1) uniform params_t { } params;
layout(push_constant, std140) uniform push_t
{
  int tri_cnt;
}
push;
layout(set = 1, binding = 0) readonly  buffer buf_ivtx_t { rtgeo_vtx_t v[]; } buf_ivtx;
layout(set = 1, binding = 1) writeonly buffer buf_ovtx_t { rtgeo_vtx_t v[]; } buf_ovtx;

// perform (non-linear) transformation of a point p in world space
vec3 xform(vec3 p)
{
  float rad = 3;
  float angle = 0.4*p.y + .1*global.frame;
  vec2 off = vec2(rad, 0);
  mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
  off = rot * off;
  p.xz += off.xy;
  return p;
}

void main()
{
  uint tidx = gl_GlobalInvocationID.x;
  if(tidx > push.tri_cnt) return;

  for(int v=0;v<3;v++)
  {
    rtgeo_vtx_t vtx = buf_ivtx.v[3*tidx+v];
    vec3 p = vec3(vtx.x, vtx.y, vtx.z);
    vec3 n = geo_decode_normal(vtx.n);

    // transform normal
    vec3 up = vec3(1,0,0);
    if(abs(n.x) > abs(n.y)) up = vec3(0,1,0);
    vec3 du = normalize(cross(up, n));
    vec3 dv = normalize(cross(du, n));

    vec3 p1 = p + 0.01 * du;
    vec3 p2 = p + 0.01 * dv;
    p = xform(p);
    p1 = xform(p1);
    p2 = xform(p2);
    n = normalize(cross(p2-p, p1-p));

    vtx.n = geo_encode_normal(n);
    vtx.x = p.x; vtx.y = p.y; vtx.z = p.z;
    buf_ovtx.v[3*tidx+v] = vtx;
  }
}
