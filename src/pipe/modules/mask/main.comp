#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(std140, set = 0, binding = 1) uniform params_t
{
  int   mode; // 0-luminance, 1-
  float vmin;
  float vmax;
  float x0;   // start of ease-in from vmin
  float x1;   // begin of plateau at vmax
  float x2;   // end of plateau
  float x3;   // end of ease-out back to vmin
} params;
layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

const float min_log_histogram = -12.0;
const float max_log_histogram =  20.0;

void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;

  float x = 0.0, w = 0.0;
  if     (params.mode == 0) x = luminance_rec2020(rgb);
  else if(params.mode == 1) x = rgb2hsv(rgb).x;
  else if(params.mode == 2) x = rgb2hsv(rgb).y;
  else if(params.mode == 3)
  { // luminance of bayer
    ivec2 bmin = (ipos / 2) * 2;
    if((ipos.x & 1) == 0) bmin.x -= 2;
    if((ipos.y & 1) == 0) bmin.y -= 2;
    for(int jj=0;jj<2;jj++) for(int ii=0;ii<2;ii++)
    {
      float sum = 0.0;
      for(int j=0;j<2;j++) for(int i=0;i<2;i++)
        sum += texelFetch(img_in, bmin + 2*ivec2(ii, jj) + ivec2(i, j), 0).r;
      sum /= 4.0;
      vec2 dist = (ipos+0.5) - (bmin + 2*ivec2(ii,jj)+vec2(1));
      float a = 1.0/length(dist);
      w += a;
      x += sum * a;
    }
    x /= w;
  }
  if(params.mode == 0 || params.mode == 3)
  {
    if (x < pow(2.0, min_log_histogram)) x = 0;
    else x = (log2(x) - min_log_histogram) / max_log_histogram;
  }
  float v = smoothstep(params.x0, params.x1, x) * (1.0-smoothstep(params.x2, params.x3, x));
  v = mix(params.vmin, params.vmax, v);

  imageStore(img_out, ipos, vec4(v));
}
