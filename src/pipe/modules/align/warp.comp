#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{
  uint frame;
} global;

layout(push_constant, std140) uniform push_t
{
  uint filters;
  int  scale;
} push;

layout( // input buffer
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input buffer warp offsets
    set = 1, binding = 1
) uniform sampler2D img_off;

layout( // output buffer
    set = 1, binding = 2
) uniform writeonly image2D img_out;

layout( // output debug visualisation of mv
    set = 1, binding = 3
) uniform writeonly image2D img_visn;

layout( // output motion vectors for other modules
    set = 1, binding = 4
) uniform writeonly image2D img_mv;

// runs on output dimensions, reads offset texture
// and input image at offset position, rounded to mosaic block.
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  int block = push.scale;
  // offset is on coarse scale (/block):
#if 0 // more or less straight
  vec2 off = block * textureLod(img_off, (ipos+.5)/vec2(block*textureSize(img_off, 0)), 0).rg;
  // vec2 off = block * sample_soft(img_off, (ipos+.5)/vec2(block*textureSize(img_off, 0))).rg;
  // vec2 off = block * texelFetch(img_off, ipos / block, 0).rg;
#else // smallest in block, filters out some remaining jitter due to texture aliasing
  vec2 off = vec2(10000, 10000);
  const int r = 1;
  for(int j=-r;j<=r;j++) for(int i=-r;i<=r;i++)
  {
    vec2 o = block * texelFetch(img_off, ivec2(i, j) + ipos / block, 0).rg;
    if(dot(o,o) < dot(off,off)) off = o;
  }
#endif

  vec3 col;
  if(push.filters == 9)
  { // xtrans: stupid hack #2: get block coordinate and select closest pixel of same colour
    ivec2 pos = ipos - (ipos/3)*3;          // position inside src 3x3 block
    ivec2 dst = (ivec2(ipos + off.rg)/3)*3; // beginning of dst 3x3 block
    vec2 fdst = ipos + off.rg - dst;        // position inside dst 3x3 block (not rounded yet)
    ivec2 rd; // final rounded read position
    if(((pos.x + pos.y) & 1) == 0)
    { // green pixel, round to any pixel in the X
      ivec2 idst = clamp(ivec2(fdst), 0, 2);
      if(idst.x == 0 || idst.x == 2) idst.y = fdst.y > 1.5 ? 2 : 0;
      else idst.y = 1;
      rd = dst + idst;
    }
    else // red and blue
    {
      ivec2 idst = ivec2(fdst.x > 1.5 ? 2 : 0, fdst.y > 1.5 ? 2 : 0);
      bool blue_top = ((ipos.x/3 + ipos.y/3) & 1) > 0;
      bool new_blue_top = ((dst.x + dst.y) & 1) > 0;
      if(blue_top != new_blue_top) // argh whatever, this super explicit form works
      { // swapping meaning of red and blue pixels
        if(pos.y == 1) idst.x = 1;
        else           idst.y = 1;
      }
      else
      { // same pattern
        if(pos.y == 1) idst.y = 1;
        else           idst.x = 1;
      }
      rd = dst + idst;
    }
    col = texelFetch(img_in, rd, 0).rrr;
  }
  else if(push.filters == 0)
  { // no mosaic: just grab pixel regardless of mosaic
    // col = texture(img_in, (vec2(ipos)+0.5 + off.rg)/vec2(textureSize(img_in, 0))).rgb; // soft
    // col = sample_catmull_rom(img_in, (vec2(ipos)+0.0 + off.rg)/vec2(textureSize(img_in, 0))).rgb; // sharper
    col = texelFetch(img_in, ipos + ivec2(off.rg), 0).rgb; // sharpest
  }
  else
  { // bayer: stupid hack #1 to keep mosaic pattern: round off to block size:
    ivec2 offi = ivec2(off.rg / (block));
    offi = block * offi;
    col = texelFetch(img_in, ipos + offi, 0).rrr;
  }

  { // fill debug normals
    // float len = length(off.xy);
    // vec3 rgb = vec3(0.0);
    // if(len > 2.0) rgb = vec3(off.xy/max(10.0, len), 0);
    vec3 rgb = vec3(off.xy, 0) * 0.05;
    rgb = clamp((vec3(1.0) + rgb)*.5, vec3(0.0), vec3(1.0));
    imageStore(img_visn, ipos, vec4(rgb, 1));
  }

  // pass on rescaled motion vectors for output
  imageStore(img_mv, ipos, off.xyxy);

  imageStore(img_out, ipos, vec4(col, 1));
}
