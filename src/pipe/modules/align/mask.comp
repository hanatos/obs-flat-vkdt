#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{
  uint frame;
} global;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float merge_k;
  float merge_n;
  // blur0--3 to follow here but we don't care
} params;

layout(set = 1, binding = 0) uniform sampler2D img_dst;
layout(set = 1, binding = 1) uniform sampler2D img_src;
layout(set = 1, binding = 2) uniform sampler2D img_off;
layout(set = 1, binding = 3) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 col = texelFetch(img_dst, ipos, 0).rgb;

  vec3 mom1 = vec3(0.0f);
  vec3 mom2 = vec3(0.0f);
  const int r = 1;
  for(int yy = -r; yy <= r; yy++) {
    for(int xx = -r; xx <= r; xx++) {
      vec2 off = textureLod(img_off, (ipos+.5)/vec2(textureSize(img_off, 0)), 0).rg;
      vec3 c = texelFetch(img_src, ivec2(ipos + off + vec2(xx, yy)), 0).rgb;
      mom1 += c;
      mom2 += c * c;
    }
  }
  mom1 /= (2.0 * r + 1) * (2.0 * r + 1);
  mom2 /= (2.0 * r + 1) * (2.0 * r + 1);

  vec3 sigma = sqrt(max(vec3(0), mom2 - mom1 * mom1));
  // float mask = max(0, length((mom1 - col) / sigma) - params.merge_n) * params.merge_k;
  float mask = max(0, 1.0/length(sigma) - params.merge_n) * params.merge_k;
  imageStore(img_out, ipos, vec4(vec3(mask), 1));
}

