#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"
#include "config.h"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(push_constant, std140) uniform push_t
{
  vec4 black;
  vec4 white;
  uint filters;
  int  block;
} push;

layout( // input buffer rggb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output buffer gray scale
    set = 1, binding = 1
) uniform writeonly image2D img_out;

// output grey scale image downsized 2x2
// (this might be 3x3 for xtrans).
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb;
  if(push.filters == 0) // no CFA
  {
    if(push.block == 1)
    {
      rgb = texelFetch(img_in, ipos, 0).rgb;
    }
    else if(push.block == 2)
    {
      rgb  = texelFetch(img_in, 2*ipos+ivec2(0,0), 0).rgb * .25;
      rgb += texelFetch(img_in, 2*ipos+ivec2(0,1), 0).rgb * .25;
      rgb += texelFetch(img_in, 2*ipos+ivec2(1,0), 0).rgb * .25;
      rgb += texelFetch(img_in, 2*ipos+ivec2(1,1), 0).rgb * .25;
    }
    else if(push.block == 3)
    {
      rgb  = texelFetch(img_in, 3*ipos+ivec2(0,0), 0).rgb * 1.0/9.0;
      rgb += texelFetch(img_in, 3*ipos+ivec2(0,1), 0).rgb * 1.0/9.0;
      rgb += texelFetch(img_in, 3*ipos+ivec2(0,2), 0).rgb * 1.0/9.0;
      rgb += texelFetch(img_in, 3*ipos+ivec2(1,0), 0).rgb * 1.0/9.0;
      rgb += texelFetch(img_in, 3*ipos+ivec2(1,1), 0).rgb * 1.0/9.0;
      rgb += texelFetch(img_in, 3*ipos+ivec2(1,2), 0).rgb * 1.0/9.0;
      rgb += texelFetch(img_in, 3*ipos+ivec2(2,0), 0).rgb * 1.0/9.0;
      rgb += texelFetch(img_in, 3*ipos+ivec2(2,1), 0).rgb * 1.0/9.0;
      rgb += texelFetch(img_in, 3*ipos+ivec2(2,2), 0).rgb * 1.0/9.0;
    }
    else if(push.block == 4)
    {
      rgb  = texture(img_in, (4*ipos+ivec2(1,1))/vec2(textureSize(img_in, 0))).rgb * .125;
      rgb += texture(img_in, (4*ipos+ivec2(1,3))/vec2(textureSize(img_in, 0))).rgb * .125;
      rgb += texture(img_in, (4*ipos+ivec2(3,1))/vec2(textureSize(img_in, 0))).rgb * .125;
      rgb += texture(img_in, (4*ipos+ivec2(3,3))/vec2(textureSize(img_in, 0))).rgb * .125;
    }
  }
  else if(push.filters == 9) // x-trans
  {
    float c0 = texelFetch(img_in, 3*ipos, 0).r;
    float c1 = texelFetch(img_in, 3*ipos+ivec2(0,1), 0).r;
    float c2 = texelFetch(img_in, 3*ipos+ivec2(0,2), 0).r;
    float c3 = texelFetch(img_in, 3*ipos+ivec2(1,0), 0).r;
    float c4 = texelFetch(img_in, 3*ipos+ivec2(1,1), 0).r;
    float c5 = texelFetch(img_in, 3*ipos+ivec2(1,2), 0).r;
    float c6 = texelFetch(img_in, 3*ipos+ivec2(2,0), 0).r;
    float c7 = texelFetch(img_in, 3*ipos+ivec2(2,1), 0).r;
    float c8 = texelFetch(img_in, 3*ipos+ivec2(2,2), 0).r;
    rgb.g = (c0 + c2 + c4 + c6 + c8)*1.0/5.0;
    vec2 col = vec2((c1 + c7)*0.5, (c3 + c5)*.5);
    if(((ipos.x + ipos.y) & 1) > 0)
      rgb.rb = col;
    else
      rgb.br = col;
    rgb = max(vec3(0), (rgb*65535.0 - push.black.rgb)/(push.white.rgb-push.black.rgb));
  }
  else // bayer
  {
    vec4 c = textureGather(img_in, 2*(ipos+.5)/vec2(textureSize(img_in, 0)), 0);
    rgb = vec3(c.w, (c.x+c.z)/2.0, c.y);
    rgb = max(vec3(0), (rgb*65535.0 - push.black.rgb)/(push.white.rgb-push.black.rgb));
  }

  // rgb is probably not rec2020, so this weighting could be 1 1 1 or anything really instead:
  // float lum = luminance_rec2020(rgb);
  float lum = dot(rgb, vec3(0.333, 0.333, 0.333));
  // "chroma keying" works better on raw images that have super low contrast due to pre-black-point-subtraction
  // float lum = rgb.r/(rgb.g+rgb.b);
  // float lum = rgb.g/(rgb.r+rgb.b);
  // float lum = rgb.b/(rgb.r+rgb.g);
  imageStore(img_out, ipos, vec4(vec3(lum), 1));
}
