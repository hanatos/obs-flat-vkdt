#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

// output grey scale image downsized 4x4
void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  vec4 c0 = textureGather(img_in, (4*opos+vec2(0.0, 0.0))/vec2(textureSize(img_in, 0)), 0);
  vec4 c1 = textureGather(img_in, (4*opos+vec2(0.0, 2.0))/vec2(textureSize(img_in, 0)), 0);
  vec4 c2 = textureGather(img_in, (4*opos+vec2(2.0, 0.0))/vec2(textureSize(img_in, 0)), 0);
  vec4 c3 = textureGather(img_in, (4*opos+vec2(2.0, 2.0))/vec2(textureSize(img_in, 0)), 0);
  float c =
   (c0.x+c0.y+c0.z+c0.w+
    c1.x+c1.y+c1.z+c1.w+
    c2.x+c2.y+c2.z+c2.w+
    c3.x+c3.y+c3.z+c3.w) / 16.0;
  imageStore(img_out, opos, vec4(vec3(c), 1));
}
