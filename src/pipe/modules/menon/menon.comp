#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "shared.glsl"
#include "config.h"

// these are usually fixed at 8 (defined in localsize.h and included here and on cpu side)
// we definitely want more than that now. ingo says he needs like 5px boundary in practice :(
layout(local_size_x = DT_MENON_TILE_WD, local_size_y = DT_MENON_TILE_HT, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float sigma;
  uint  iter_cnt;
} params;

layout( // input buffer, bayer mosaic, one colour per pixel
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output buffer, demosaiced, rgb per pixel
    set = 1, binding = 1
) uniform writeonly image2D img_out;

// making this not square but off by one (to reduce bank conflicts in the y pass)
// reduces run time from 8.5 to 8.3ms
#define STRIDE (DT_MENON_TILE_WD+1)
shared vec3 curr[STRIDE*DT_MENON_TILE_HT];

// return a pixel in the shared memory block, clamping to borders respecting bayer block
// works for pixel offset o in [-2,2]^2
vec3 getpx(const ivec2 p, const ivec2 o)
{
  if(p.y < 0 || p.y >= DT_MENON_TILE_HT) return vec3(100); // XXX this triggers but does not show bright spots!
  ivec2 c = p+o;
  if(c.x <  0) c.x += 2;
  if(c.x >= DT_MENON_TILE_WD) c.x -= 2;
  if(c.y <  0) c.y += 2;
  if(c.y >= DT_MENON_TILE_HT) c.y -= 2;
  const uint idx = c.x + STRIDE * c.y;
  return curr[idx];
}

void setr(ivec2 c, float r)
{
  const uint idx = c.x + STRIDE * c.y;
  curr[idx].r = r;
}

void setg(ivec2 c, float g)
{
  const uint idx = c.x + STRIDE * c.y;
  curr[idx].g = g;
}

void setb(ivec2 c, float b)
{
  const uint idx = c.x + STRIDE * c.y;
  curr[idx].b = b;
}

// we are running on input tiles + border
void
main()
{
  ivec2 ipos =
    ivec2(gl_WorkGroupID.xy * ivec2(
        DT_MENON_TILE_WD-2*DT_MENON_BORDER,
        DT_MENON_TILE_HT-2*DT_MENON_BORDER));
  // if start of tile is out of image we have nothing to do:
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;
  const ivec2 p = ivec2(gl_LocalInvocationID.xy); // shorthand
  ipos += p - ivec2(DT_MENON_BORDER, DT_MENON_BORDER); // add offset within the tile

  // everybody get their texels:
  const uint idx = p.x + STRIDE * p.y;
  // XXX clamp to bayer block!
  curr[idx] = texelFetch(img_in, clamp(ipos, ivec2(0), textureSize(img_in, 0)-1), 0).rrr;

  // XXX TODO: PERF: keep current pixel in register?

  // we replicated all the single-channel bayer cfa colours into the vec3 in shared memory.
  // this means we can access them by any swizzle we'd like at first.
  // in the first pass (interpolate green) we will use rb as scratch memory.

  barrier(); // be sure all the data is written to shared memory

  // A) 5-tap FIR green interpolation H or V
  // gh = 0.5*(g+1 + g-1) + 0.25*(2*r0 - r+2 - r-2)    (or blue ofc)
  // gv = ..
  float gh, gv;
  if(((ipos.x+ipos.y)&1) == 0)
  { // no green pixel (we are red or blue)
    // gh is green horizontal, interpolates along the horizon (x-axis)
    gh = 0.5*(getpx(p, ivec2(1, 0)).r + getpx(p, ivec2(-1, 0))).r
      + 0.25*(2.0*getpx(p, ivec2(0)).r - getpx(p, ivec2(2, 0)).r - getpx(p, ivec2(-2, 0)).r);
    gv = 0.5*(getpx(p, ivec2(0, 1)).r + getpx(p, ivec2(0, -1))).r
      + 0.25*(2.0*getpx(p, ivec2(0)).r - getpx(p, ivec2(0, 2)).r - getpx(p, ivec2(0, -2)).r);
    // B) decide H or V
    // compute
    // CH = r - gh  // on a red  pixel
    //    = b - gh  // on a blue pixel
    // and same with CV and gv
    float rb = getpx(p, ivec2(0)).r; // red or blue on our pixel
    setr(p, rb - gh); // horizontal value in red channel
    setb(p, rb - gv); // vertical value in blue channel
  }
  barrier();

  float Dh = 0.0, Dv = 0.0;
  if(((ipos.x+ipos.y)&1) == 0)
  { // no green pixel (we are red or blue)
    // DH = |CH - CH(j+2)|
    // DV = |CV - CV(i+2)|
    Dh = abs(getpx(p, ivec2(0)).r - getpx(p, ivec2(2, 0)).r);
    Dv = abs(getpx(p, ivec2(0)).b - getpx(p, ivec2(0, 2)).b);
  }
  barrier();
  setr(p, Dh);
  setb(p, Dv);
  barrier();

  bool vertical = false;

  if(((ipos.x+ipos.y)&1) == 0)
  { // no green pixel (we are red or blue)
    // compute the classifiers dh and dv as the sum of DH and DV over a 5x5 window
    // weighted sum giving 3x more weight to those in same row (dh) or col (dv)
    vec2 delta = vec2(0.0);
    for(int j=-2;j<=2;j++)
      for(int i=-2;i<=2;i++)
        delta += getpx(p, ivec2(i,j)).rb
          * vec2(j==0?3.0:1.0, i==0?3.0:1.0);
    // if dv < dh: g = gv
    // else        g = gh
    vertical = delta.y < delta.x;
  }
  barrier();

  if(((ipos.x+ipos.y)&1) == 0)
  { // no green pixel (we are red or blue)
    setr(p, getpx(p, ivec2(0)).g); // restore red or blue channel into .r location
    if(vertical) setg(p, gv);
    else         setg(p, gh);
  }
  barrier();
  // now green is interpolated in the shared memory .g slot. the original data is in .r (be it red, green, or blue).

  // C) colour interpolation (red/blue)
  if(((ipos.x+ipos.y)&1) == 1)
  { // green pixel
    // on a green pixel, estimate red (blue) by bilinear interpolation of R-G (B-G)
    vec2 cg; // red/blue, green
    vec2 c = getpx(p, ivec2(0)).gg; // reconstructed colour (red/blue)
    cg = getpx(p, ivec2(-1, 0)).rg;
    c.x += 0.5*(cg.r-cg.y);
    cg = getpx(p, ivec2( 1, 0)).rg;
    c.x += 0.5*(cg.r-cg.y);
    cg = getpx(p, ivec2(0, -1)).rg;
    c.y += 0.5*(cg.r-cg.y);
    cg = getpx(p, ivec2(0,  1)).rg;
    c.y += 0.5*(cg.r-cg.y);
    if((ipos.y & 1) == 1) c = c.yx; // blue row, swap red to front
    setr(p, c.x);
    setb(p, c.y);
  }
  barrier();
  // now every green pixel also has a red and blue channel correctly set as .rgb

  if(((ipos.x+ipos.y)&1) == 0)
  { // red/blue pixel (we have only one from the initial bayer pattern in channel .r)
  // on a blue pixel, estimate red as
  // if vertical (dv<dh), do this on the row (i-1, i+1)
    ivec2 o = vertical ? ivec2(1, 0) : ivec2(0, 1);
    vec2 c;
    // r = b + 0.5*(r-1 - b-1 + r+1 - b+1) // reconstruct r for blue line like this
    float org = getpx(p, ivec2(0)).r; // is either red or blue, depending on row
    float res = org;
    c = getpx(p, -o).rb;
    if((ipos.y & 1) == 1) c = c.yx; // blue line, swap blue to c.x
    res += 0.5*(c.y - c.x);
    c = getpx(p, o).rb;
    if((ipos.y & 1) == 1) c = c.yx; // blue line, swap blue to c.x
    res += 0.5*(c.y - c.x);
    if((ipos.y & 1) == 1)
    { // blue row, copy b to correct place and set interpolated red
      setb(p, org);
      setr(p, res);
    }
    else setb(p, res); // red line, set blue
  }
#if 1
  barrier();
  // D) refinement
  // red/blue in green location: use 1d lowpass of direct nb that belong to bayer pattern
  // green channel in red/blue location: 1d lowpass along edges
  // 1) update green in r/b: blur green 1d along h or v: g = gl gh, r = rl rh
  //    g = gl + rh
  if(((ipos.x+ipos.y)&1) == 0)
  { // red/blue pixel
    ivec2 o  = vertical ? ivec2(0, 1) : ivec2(1, 0);
    vec3  px = getpx(p, ivec2(0));
    vec3  lo = 1.0/3.0*(getpx(p, -o) + px + getpx(p, o));
    float ch = ((ipos.y & 1) == 0) ? px.r - lo.r : px.b - lo.b;
    setg(p, lo.g + ch);
  }
  // 2) update red/blue in green location
  //    g = gl+gh, r = rl+rh   1d h/v depending on location of red nb
  //    r = rl+gh
  barrier();
  if(((ipos.x+ipos.y)&1) == 1)
  { // green pixel
    ivec2 ox = ivec2(1, 0);
    ivec2 oy = ivec2(0, 1);
    vec3  px = getpx(p, ivec2(0));
    vec3  xl = 1.0/3.0*(getpx(p, -ox) + px + getpx(p, ox));
    vec3  yl = 1.0/3.0*(getpx(p, -oy) + px + getpx(p, oy));
    vec3  rl, bl;
    if((ipos.y & 1) == 0) { rl = xl; bl = yl; }
    else                  { rl = yl; bl = xl; }
    float rh = px.g - rl.g;
    float bh = px.g - bl.g;
    setr(p, rl.r + rh);
    setb(p, bl.b + bh);
  }
  barrier();
  // 3) update red (blue) in blue (red) locations
  //    r = rl+rh, b = bl+bl   1d h/v depending on dv/dh
  //    r = rl+bh
  if(((ipos.x+ipos.y)&1) == 0)
  { // red/blue pixel
    ivec2 ox = ivec2(1, 0);
    ivec2 oy = ivec2(0, 1);
    vec3  px = getpx(p, ivec2(0));
    vec3  xl = 1.0/3.0*(getpx(p, -ox) + px + getpx(p, ox));
    vec3  yl = 1.0/3.0*(getpx(p, -oy) + px + getpx(p, oy));
    vec3  rl, bl;
    if((ipos.y & 1) == 0) { rl = xl; bl = yl; }
    else                  { rl = yl; bl = xl; }
    float rh = px.b - rl.b;
    float bh = px.r - bl.r;
    setr(p, rl.r + rh);
    setb(p, bl.b + bh);
  }
#endif
  barrier();

  // write back to output texture
  if(all(greaterThanEqual(gl_LocalInvocationID.xy, uvec2(DT_MENON_BORDER))) &&
     all(lessThan(gl_LocalInvocationID.xy, uvec2(DT_MENON_TILE_WD-DT_MENON_BORDER, DT_MENON_TILE_HT-DT_MENON_BORDER))) &&
     all(lessThan(ipos, imageSize(img_out))))
    imageStore(img_out, ipos, vec4(curr[idx], 1));
}
