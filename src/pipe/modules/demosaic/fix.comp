#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  int fixup;
} params;

layout(push_constant, std140) uniform push_t
{
  vec4 wb;
  uint filters;
} push;

layout( // input original
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input green
    set = 1, binding = 1
) uniform sampler2D img_g;

layout( // input buffer rgb gaussian covariance
    set = 1, binding = 2
) uniform sampler2D img_cov;

layout( // output f16 buffer rgba
    set = 1, binding = 3
) uniform writeonly image2D img_out;

float
eval_gauss(vec4 cov, vec2 o)
{
  vec2 eval = cov.xy;
  mat2 E = mat2(cov.z, -cov.w,
                cov.w,  cov.z);
  vec2 of = E * o;
  return clamp(exp(-0.5*dot(of/eval, of)), 1e-3, 1.0);
}

void write_xtrans2(
    float gc,
    float gh,
    ivec2 pos,
    float col,
    vec4  cov,
    ivec2 x,
    inout vec3 rgb,
    inout vec3 w)
{
  float corr = (1e-4+gc)/(1e-4+gh);
  bool blue_top = ((pos.x/3 + pos.y/3) & 1) > 0;
  pos = pos - (pos/3)*3;
  if(((pos.x + pos.y) & 1) == 0)
  {
    rgb.g = gc;
    w.g   = 1;
  }
  else if(blue_top ^^ (pos.y == 1))
  {
    float weight = eval_gauss(vec4(3*cov.xy, cov.zw), x);
    rgb.b += col * corr * weight;
    w.b += weight;
  }
  else
  {
    float weight = eval_gauss(vec4(3*cov.xy, cov.zw), x);
    rgb.r += col * corr * weight;
    w.r += weight;
  }
}

void write_bayer2(
    float gc,
    float gh,
    ivec2 o,
    float col,
    vec4  cov,
    ivec2 x,
    inout vec3 rgb,
    inout vec3 w)
{
  if((((o.x & 1) == 0) && ((o.y & 1) == 1)) ||
     (((o.x & 1) == 1) && ((o.y & 1) == 0)))
  { // green
    rgb.g = gc;
    w.g   = 1;
  }
  else if(((o.x & 1) == 0) && ((o.y & 1) == 0))
  { // red
    float weight = eval_gauss(vec4(2*cov.xy, cov.zw), x);
    rgb.r += col * (1e-4+gc)/(1e-4+gh) * weight;
    w.r += weight;
  }
  else if(((o.x & 1) == 1) && ((o.y & 1) == 1))
  { // blue
    float weight = eval_gauss(vec4(2*cov.xy, cov.zw), x);
    rgb.b += col * (1e-4+gc)/(1e-4+gh) * weight;
    w.b += weight;
  }
}

// old dcraw-style trick to interpolate only the ratio (or difference) of red
// vs green and blue vs green. based on first interpolating green (which we
// have done in a previous pass)
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;
  vec3 rgb = vec3(0.0);
  vec3 w   = vec3(0.0);
  float gc = texture(img_g, (ipos+0.5)/vec2(textureSize(img_g, 0))).r;

  if(push.filters == 9)
  { // x-trans
    vec4 cov = texelFetch(img_cov, (ipos+1)/3, 0);
    cov.xy = clamp(cov.xy, 1., 10.); // smooth out a bit, loose sharpness
    const int r = clamp(params.fixup+2, 2, 3);
    for(int j=-r;j<=r;j++) for(int i=-r;i<=r;i++)
      write_xtrans2(gc,
          texture(img_g, (ipos+ivec2(i,j)+0.5)/vec2(textureSize(img_g, 0))).r,
          ipos+ivec2(i, j),
          texture(img_in, (ipos+ivec2(i,j)+0.5)/vec2(textureSize(img_in, 0))).r,
          cov, ivec2(i, j),
          rgb, w);
  }
  else
  { // bayer
    vec4 cov = texelFetch(img_cov, (ipos+1)/2, 0);
    cov.xy = clamp(cov.xy, 1.0, 49); // smooth out a bit, loose sharpness
    const int r = clamp(params.fixup+1, 1, 2);
    for(int j=-r;j<=r;j++) for(int i=-r;i<=r;i++)
        write_bayer2(gc,
            texture(img_g, (ipos+ivec2(i,j)+0.5)/vec2(textureSize(img_g, 0))).r,
            ipos+ivec2(i, j),
            texture(img_in, (ipos+ivec2(i,j)+0.5)/vec2(textureSize(img_in, 0))).r,
            cov, ivec2(i, j),
            rgb, w);
  }
  rgb /= max(vec3(1e-8), w);
  imageStore(img_out, ipos, vec4(rgb, 1.0));
}
