#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(push_constant, std140) uniform push_t
{
  vec4 wb;
  uint filters;
} push;


layout( // input uint16 buffer rggb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f16 buffer rgb
    set = 1, binding = 1
) uniform writeonly image2D img_out;

// demosaic reduced size. run on output dimensions, gather all colours from
// input buffer (this might be 3x3 for xtrans).
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec4 rgba;

  if(push.filters == 9)
  {
    float c0 = texelFetch(img_in, 3*ipos, 0).r;
    float c1 = texelFetch(img_in, 3*ipos+ivec2(0,1), 0).r;
    float c2 = texelFetch(img_in, 3*ipos+ivec2(0,2), 0).r;
    float c3 = texelFetch(img_in, 3*ipos+ivec2(1,0), 0).r;
    float c4 = texelFetch(img_in, 3*ipos+ivec2(1,1), 0).r;
    float c5 = texelFetch(img_in, 3*ipos+ivec2(1,2), 0).r;
    float c6 = texelFetch(img_in, 3*ipos+ivec2(2,0), 0).r;
    float c7 = texelFetch(img_in, 3*ipos+ivec2(2,1), 0).r;
    float c8 = texelFetch(img_in, 3*ipos+ivec2(2,2), 0).r;
    rgba.g = (c0 + c2 + c4 + c6 + c8)*1.0/5.0;
    vec2 col = vec2((c1 + c7)*0.5, (c3 + c5)*.5);
    if(((ipos.x + ipos.y) & 1) > 0)
      rgba.rb = col;
    else
      rgba.br = col;
  }
  else
  {
    vec4 c = textureGather(img_in, 2*(ipos+.5)/vec2(textureSize(img_in, 0)), 0);
    rgba = vec4(c.w, (c.x+c.z)/2.0, c.y, 1.0);
  }
  imageStore(img_out, ipos, rgba);
}
