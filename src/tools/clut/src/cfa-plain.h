#pragma once
#include "xrand.h"

static inline void
cfa_plain_init(
    int num,
    double *p)
{
  for(int i=0;i<num;i++) p[i] = 1e-4 + 1e-3*xrand();
#if 0 // dunno whether we're called for red green or blue
  static const double cfa_plain_param[3*36] = { // 380..730 10nm inited from canon 5d2
    // red
    0.0354000000000, 0.0295000000000, 0.0173000000000, 0.0162000000000, 0.0181000000000,
    0.0139000000000, 0.0125000000000, 0.0107000000000, 0.0109000000000, 0.0105000000000,
    0.0126000000000, 0.0118000000000, 0.0195000000000, 0.0397000000000, 0.0912000000000,
    0.1667000000000, 0.1654000000000, 0.1487000000000, 0.1817000000000, 0.2920000000000,
    0.4343000000000, 0.4914000000000, 0.5136000000000, 0.4413000000000, 0.3824000000000,
    0.3134000000000, 0.2482000000000, 0.1757000000000, 0.1366000000000, 0.0820000000000,
    0.0365000000000, 0.0095000000000, 0.0076000000000, 0.0070000000000, 0.0070000000000,
    0.0052000000000,
    // green
    0.0359000000000, 0.0300000000000, 0.0197000000000, 0.0240000000000, 0.0495000000000,
    0.0542000000000, 0.0809000000000, 0.0902000000000, 0.1267000000000, 0.2794000000000,
    0.5298000000000, 0.6216000000000, 0.8288000000000, 0.9289000000000, 0.9776000000000,
    1.0000000000000, 0.8925000000000, 0.8624000000000, 0.7431000000000, 0.6499000000000,
    0.4963000000000, 0.3550000000000, 0.2328000000000, 0.1087000000000, 0.0599000000000,
    0.0344000000000, 0.0235000000000, 0.0146000000000, 0.0128000000000, 0.0111000000000,
    0.0075000000000, 0.0066000000000, 0.0072000000000, 0.0064000000000, 0.0073000000000,
    0.0053000000000,
    // blue
    0.0334000000000, 0.0320000000000, 0.0279000000000, 0.1461000000000, 0.5138000000000,
    0.6375000000000, 0.7291000000000, 0.8180000000000, 0.8515000000000, 0.8336000000000,
    0.7204000000000, 0.6129000000000, 0.4501000000000, 0.3204000000000, 0.1682000000000,
    0.0910000000000, 0.0524000000000, 0.0351000000000, 0.0216000000000, 0.0163000000000,
    0.0131000000000, 0.0107000000000, 0.0098000000000, 0.0079000000000, 0.0068000000000,
    0.0069000000000, 0.0075000000000, 0.0078000000000, 0.0082000000000, 0.0070000000000,
    0.0054000000000, 0.0059000000000, 0.0067000000000, 0.0064000000000, 0.0073000000000,
    0.0053000000000,
  };
  for(int i=0;i<num;i++) cfa_param[i] = 1e-4 + 1e-3*xrand();
#endif
}

static inline double
cfa_plain_smoothness(
    int num,
    const double *p)
{
  double err = 0.0;
  for(int k=0;k<3;k++)
    for(int i=1;i<num;i++)
      err += 100*(p[num*k+i]-p[num*k+i-1])*(p[num*k+i]-p[num*k+i-1]) / num;
  return err;
}

static inline double
cfa_plain_all(
    int           num,         // number of params
    const double *p,           // parameters
    double        wavelength)  // evaluate at this wavelength
{
  float step = (730.0f - 380.0f) / (num - 1.0f);
  int l = (wavelength - 360.0)/step;
  if(l < 0 || l >= 36) return 0.0;
  return p[l] * p[l]; // square to force non-negativity
  // return 0.32 * p[l]; // XXX pass through
}

static inline double
cfa_plain_red(int num, const double *p, double wavelength)
{ return cfa_plain_all(num, p, wavelength); }
static inline double
cfa_plain_green(int num, const double *p, double wavelength)
{ return cfa_plain_all(num, p, wavelength); }
static inline double
cfa_plain_blue(int num, const double *p, double wavelength)
{ return cfa_plain_all(num, p, wavelength); }
